/*  
 * ExperimentQueueThreadServicesImpl.java; Jun 5, 2009
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for 
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may 
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 * 
 * Software distributed under the License is distributed on an "AS IS"  basis, 
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for 
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services;

import java.io.BufferedReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.InputStream;
import java.util.Collection;
import java.util.List;
import java.util.ArrayList;

@Deprecated
public class ExperimentQueueThreadServicesImpl implements ExperimentQueueThreadServices {
	// The name of the window service
	private static String SERVICENAME = "SeamchainService";
	// Object to syncronize multiusers access to the service
	private static Object mutex = new Object();

	// Supported commands
	public enum NetCommandType {
		start, stop, check
	};

	/*
	 * public Collection<String> start()
	 * 
	 * return the output generated by the execution of the command Note: if
	 * there is there are warning (start an already started service), the output
	 * will contains the String 'HELPMSG'...means that server-client are not
	 * synchronized
	 */
	public Collection<String> start() {
		synchronized (mutex) {
			return cmdexecuter(NetCommandType.start);
		}
	}

	/*
	 * public Collection<String> restart()
	 * 
	 * return the output generated by the execution of the command Note: if
	 * there is there are warning (restart a stopped service), the output will
	 * contains the String 'HELPMSG'...means that server-client are not
	 * synchronized
	 */
	public Collection<String> restart() {
		Collection<String> result = new ArrayList<String>();
		synchronized (mutex) {
			result = stop();
			// if we are stopping an already stopped service...we will return
			// the
			// error message without calling the start()
			for (String log : result)
				if (log.contains("HELPMSG"))
					return result;

			result.addAll(start());
			return result;
		}
	}

	/*
	 * public Collection<String> stop()
	 * 
	 * return the output generated by the execution of the command Note: if
	 * there is there are warning (stop an already stopped service), the output
	 * will contains the String 'HELPMSG'...means that server-client are not
	 * synchronized
	 */
	public Collection<String> stop() {
		synchronized (mutex) {
			return cmdexecuter(NetCommandType.stop);
		}
	}

	/*
	 * public boolean check()
	 * 
	 * return true if the service is running else return false
	 */
	public boolean check() {
		synchronized (mutex) {
			// @activeservices contains a list of all running service
			Collection<String> activeservices = cmdexecuter(NetCommandType.check);
			for (String item : activeservices)
				// if @activeservices contains the name of the service, means
				// that the service is running...and we return true
				if (item.contains(SERVICENAME))
					return true;

			return false;
		}
	}

	/*
	 * private Collection<String> cmdexecuter(NetCommandType cmd)
	 * 
	 * execute a dos command and return its output as a Collection<String>
	 * 
	 * if @cmd == NetCommandType.start > net start myservice
	 * 
	 * if @cmd == NetCommandType.stop > net stop myservice
	 * 
	 * if @cmd == NetCommandType.check > net start //return a list of all
	 * running services on the machine
	 * 
	 * 
	 * return a message (the output of the dos command), the command failure can
	 * be detected checking if the message contains the path 'HELPMSG' (if
	 * contains 'HELPMSG' there is an error)
	 */
	private Collection<String> cmdexecuter(NetCommandType cmd) {

		String[] cmdstr;
		if (cmd.equals(NetCommandType.start))
			// execute the dos command:
			// > net start myservice
			cmdstr = new String[] { "cmd.exe", "/E:1900", "/C", "net", "start",
					SERVICENAME };
		else if (cmd.equals(NetCommandType.stop))
			// execute the dos command:
			// > net stop myservice
			cmdstr = new String[] { "cmd.exe", "/E:1900", "/C", "net", "stop",
					SERVICENAME };
		else
			// execute the dos command:
			// > net start
			cmdstr = new String[] { "cmd.exe", "/E:1900", "/C", "net", "start" };

		final List<String> output = new ArrayList<String>();

		ProcessBuilder pb = new ProcessBuilder(cmdstr);

		pb.redirectErrorStream(true);

		try {
			// trigger the spawn, creating Process object for controlling child.
			final Process p = pb.start();
			// From here on in, item behaves just like exec, since you have the
			// exact same Process object.
			// Spawn thread to read output of spawned program
			new Thread() {
				public void run() {
					// hook into output from spawned program
					final InputStream is = p.getInputStream();
					final InputStreamReader isr = new InputStreamReader(is);
					final BufferedReader br = new BufferedReader(isr, 100/*
																		 * buffsize
																		 * in
																		 * chars
																		 */);
					String line;
					try {
						try {
							// C/C++ can write this with putc
							while ((line = br.readLine()) != null) {
								output.add(line);

							}
						} catch (EOFException e) {
						}
						br.close();
					} catch (IOException e) {
						System.err.println("problem reading spawn output"
								+ e.getMessage());
						System.exit(1);
					}
					// returning from run kills the thread.
				}
			}.start();

			try {
				// wait for spawned program to terminate.
				p.waitFor();
			} catch (InterruptedException e) {
				Thread.currentThread().interrupt();
			}
			// child has terminated.

			// You must close these even if you never use them!
			p.getInputStream().close();
			p.getOutputStream().close();
			p.getErrorStream().close();
		} catch (IOException e) {
			System.err.println("spawning problem " + e.getMessage());
			System.exit(1);
		}
		return output;
	}

}
