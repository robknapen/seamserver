/* gromit: PolicyAssessmentTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.seamproj;

import java.io.Serializable;
import java.lang.Long;
import org.seamless_ip.ontologies.seamproj.PolicyAssessment;
import org.seamless_ip.services.transferobjects.seamproj.PolicyOptionTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.seamproj.PolicyAssessment", readonly=false, used=true)
@SuppressWarnings("serial")
public class PolicyAssessmentTO extends AbstractTO implements TO<PolicyAssessmentTO, PolicyAssessment>, Serializable, Cloneable 	
{
	private PolicyOptionTO _policyoption;		
	private Long _id;		



	public PolicyAssessmentTO()
	{
		super();
		_policyoption = new PolicyOptionTO();
	}

	public static PolicyAssessment createDBInstance()
	{
		PolicyAssessment dbItem = new PolicyAssessment();
		dbItem.setPolicyOption(PolicyOptionTO.createDBInstance());
		return dbItem;
	}


	public static PolicyAssessment createDBInstance(PolicyAssessmentTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(PolicyAssessment dbItem)
    {
        if (dbItem != null) {
            dbItem.setPolicyOption(null);
        }
    }

    public PolicyAssessmentTO assignFrom(PolicyAssessment target)	
	{
		if (target != null)
		{
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_policyoption .assignFrom(target.getPolicyOption());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
		}
		return this;
	}
    
    public PolicyAssessment assignTo(PolicyAssessment target)
    {
        if (target != null) 
        {
			target.setPolicyOption(_policyoption .assignTo(target.getPolicyOption()));
			target.setId(_id);			
        }
        return target;
    }	
    
    public boolean equalsTo(PolicyAssessment target)
    {
        if (target == null)
            return false;

        PolicyAssessmentTO targetTO = new PolicyAssessmentTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public PolicyAssessmentTO clone()
    {
    	PolicyAssessmentTO clone = new PolicyAssessmentTO();
		clone.setId(_id);
		clone.setPolicyOption(_policyoption);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_policyoption != null ? _policyoption .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof PolicyAssessmentTO)) return false;

        PolicyAssessmentTO classTO = (PolicyAssessmentTO) o;

		if (_policyoption != null ? !_policyoption .equals(classTO._policyoption) : classTO._policyoption != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
        
        return true;
    }
    
    public Long getId()
    {
		return _id;
    }
    public PolicyOptionTO getPolicyOption()
    {
		return _policyoption;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setPolicyOption(PolicyOptionTO value)
    {
		_policyoption = value;
    }
}