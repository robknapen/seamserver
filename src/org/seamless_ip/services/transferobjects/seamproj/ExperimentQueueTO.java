/* gromit: ExperimentQueueTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.seamproj;

import java.io.Serializable;
import java.lang.Long;
import java.lang.String;
import java.util.HashSet;
import org.seamless_ip.ontologies.seamproj.ExperimentQueue;
import org.seamless_ip.ontologies.seamproj.ExperimentRun;
import org.seamless_ip.services.transferobjects.seamproj.ExperimentRunListTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.seamproj.ExperimentQueue", readonly=false, used=true)
@SuppressWarnings("serial")
public class ExperimentQueueTO extends AbstractTO implements TO<ExperimentQueueTO, ExperimentQueue>, Serializable, Cloneable 	
{
	private String _enddate;		
	private String _description;		
	private String _creationdate;		
	private Long _id;		
	private ExperimentRunListTO _experimentruns;		



	public ExperimentQueueTO()
	{
		super();
		_experimentruns = new ExperimentRunListTO();
	}

	public static ExperimentQueue createDBInstance()
	{
		ExperimentQueue dbItem = new ExperimentQueue();
		dbItem.setExperimentRuns(new HashSet<ExperimentRun>());
		return dbItem;
	}


	public static ExperimentQueue createDBInstance(ExperimentQueueTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(ExperimentQueue dbItem)
    {
        if (dbItem != null) {
            dbItem.setExperimentRuns(null);
        }
    }

    public ExperimentQueueTO assignFrom(ExperimentQueue target)	
	{
		if (target != null)
		{
			try {
					_creationdate = target.getCreationDate();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_description = target.getDescription();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_enddate = target.getEndDate();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_experimentruns .assignFrom(target.getExperimentRuns());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public ExperimentQueue assignTo(ExperimentQueue target)
    {
        if (target != null) 
        {
			target.setExperimentRuns(_experimentruns .assignTo(target.getExperimentRuns()));
			target.setCreationDate(_creationdate);			
			target.setDescription(_description);			
			target.setEndDate(_enddate);			
			target.setId(_id);			
        }
        return target;
    }	
    
    public boolean equalsTo(ExperimentQueue target)
    {
        if (target == null)
            return false;

        ExperimentQueueTO targetTO = new ExperimentQueueTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public ExperimentQueueTO clone()
    {
    	ExperimentQueueTO clone = new ExperimentQueueTO();
		clone.setCreationDate(_creationdate);
		clone.setDescription(_description);
		clone.setEndDate(_enddate);
		clone.setExperimentRuns(_experimentruns);
		clone.setId(_id);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_enddate != null ? _enddate .hashCode() : 0);
		result = 31 * result + (_description != null ? _description .hashCode() : 0);
		result = 31 * result + (_creationdate != null ? _creationdate .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_experimentruns != null ? _experimentruns .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof ExperimentQueueTO)) return false;

        ExperimentQueueTO classTO = (ExperimentQueueTO) o;

		if (_enddate != null ? !_enddate .equals(classTO._enddate) : classTO._enddate != null)
			return false;
		if (_description != null ? !_description .equals(classTO._description) : classTO._description != null)
			return false;
		if (_creationdate != null ? !_creationdate .equals(classTO._creationdate) : classTO._creationdate != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_experimentruns != null ? !_experimentruns .equals(classTO._experimentruns) : classTO._experimentruns != null)
			return false;
        
        return true;
    }
    
    public String getCreationDate()
    {
		return _creationdate;
    }
    public String getDescription()
    {
		return _description;
    }
    public String getEndDate()
    {
		return _enddate;
    }
    public ExperimentRunListTO getExperimentRuns()
    {
		return _experimentruns;
    }
    public Long getId()
    {
		return _id;
    }
    public void setCreationDate(String value)
    {
		_creationdate = value;
    }
    public void setDescription(String value)
    {
		_description = value;
    }
    public void setEndDate(String value)
    {
		_enddate = value;
    }
    public void setExperimentRuns(ExperimentRunListTO value)
    {
		_experimentruns = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
}