/* gromit: ExperimentRunTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.seamproj;

import java.io.Serializable;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import org.seamless_ip.ontologies.seamproj.ExperimentRun;
import org.seamless_ip.services.transferobjects.seamproj.ExperimentTO;
import org.seamless_ip.services.transferobjects.seamproj.ModelTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.seamproj.ExperimentRun", readonly=false, used=true)
@SuppressWarnings("serial")
public class ExperimentRunTO extends AbstractTO implements TO<ExperimentRunTO, ExperimentRun>, Serializable, Cloneable 	
{
	private String _status;		
	private String _logfile;		
	private ModelTO _lastcompetedmodel;		
	private Long _id;		
	private Integer _rank;		
	private ExperimentTO _experiment;		



	public ExperimentRunTO()
	{
		super();
		_lastcompetedmodel = new ModelTO();
		_experiment = new ExperimentTO();
	}

	public static ExperimentRun createDBInstance()
	{
		ExperimentRun dbItem = new ExperimentRun();
		dbItem.setExperiment(ExperimentTO.createDBInstance());
		dbItem.setLastCompetedModel(ModelTO.createDBInstance());
		dbItem.setRank(new Integer(0));
		return dbItem;
	}


	public static ExperimentRun createDBInstance(ExperimentRunTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(ExperimentRun dbItem)
    {
        if (dbItem != null) {
            dbItem.setExperiment(null);
            dbItem.setLastCompetedModel(null);
        }
    }

    public ExperimentRunTO assignFrom(ExperimentRun target)	
	{
		if (target != null)
		{
			try {
				_experiment .assignFrom(target.getExperiment());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_lastcompetedmodel .assignFrom(target.getLastCompetedModel());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_logfile = target.getLogfile();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_rank = target.getRank();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_status = target.getStatus();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public ExperimentRun assignTo(ExperimentRun target)
    {
        if (target != null) 
        {
			target.setExperiment(_experiment .assignTo(target.getExperiment()));
			target.setLastCompetedModel(_lastcompetedmodel .assignTo(target.getLastCompetedModel()));
			target.setId(_id);			
			target.setLogfile(_logfile);			
			target.setRank(_rank);			
			target.setStatus(_status);			
        }
        return target;
    }	
    
    public boolean equalsTo(ExperimentRun target)
    {
        if (target == null)
            return false;

        ExperimentRunTO targetTO = new ExperimentRunTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public ExperimentRunTO clone()
    {
    	ExperimentRunTO clone = new ExperimentRunTO();
		clone.setExperiment(_experiment);
		clone.setId(_id);
		clone.setLastCompetedModel(_lastcompetedmodel);
		clone.setLogfile(_logfile);
		clone.setRank(_rank);
		clone.setStatus(_status);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_status != null ? _status .hashCode() : 0);
		result = 31 * result + (_logfile != null ? _logfile .hashCode() : 0);
		result = 31 * result + (_lastcompetedmodel != null ? _lastcompetedmodel .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_rank != null ? _rank .hashCode() : 0);
		result = 31 * result + (_experiment != null ? _experiment .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof ExperimentRunTO)) return false;

        ExperimentRunTO classTO = (ExperimentRunTO) o;

		if (_status != null ? !_status .equals(classTO._status) : classTO._status != null)
			return false;
		if (_logfile != null ? !_logfile .equals(classTO._logfile) : classTO._logfile != null)
			return false;
		if (_lastcompetedmodel != null ? !_lastcompetedmodel .equals(classTO._lastcompetedmodel) : classTO._lastcompetedmodel != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_rank != null ? !_rank .equals(classTO._rank) : classTO._rank != null)
			return false;
		if (_experiment != null ? !_experiment .equals(classTO._experiment) : classTO._experiment != null)
			return false;
        
        return true;
    }
    
    public ExperimentTO getExperiment()
    {
		return _experiment;
    }
    public Long getId()
    {
		return _id;
    }
    public ModelTO getLastCompetedModel()
    {
		return _lastcompetedmodel;
    }
    public String getLogfile()
    {
		return _logfile;
    }
    public Integer getRank()
    {
		return _rank;
    }
    public String getStatus()
    {
		return _status;
    }
    public void setExperiment(ExperimentTO value)
    {
		_experiment = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setLastCompetedModel(ModelTO value)
    {
		_lastcompetedmodel = value;
    }
    public void setLogfile(String value)
    {
		_logfile = value;
    }
    public void setRank(Integer value)
    {
		_rank = value;
    }
    public void setStatus(String value)
    {
		_status = value;
    }
}