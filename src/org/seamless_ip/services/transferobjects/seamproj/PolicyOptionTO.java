/* gromit: PolicyOptionTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.seamproj;

import java.io.Serializable;
import java.lang.Boolean;
import java.lang.Long;
import java.util.HashSet;
import org.seamless_ip.ontologies.capri.BasicPremium;
import org.seamless_ip.ontologies.capri.BilateralTariff;
import org.seamless_ip.ontologies.capri.CouplingDegree;
import org.seamless_ip.ontologies.capri.GlobalTariff;
import org.seamless_ip.ontologies.capri.QuotaCountry;
import org.seamless_ip.ontologies.capri.SetAsideRegulation;
import org.seamless_ip.ontologies.capri.SubsidisedExport;
import org.seamless_ip.ontologies.capri.TradeReformProposal;
import org.seamless_ip.ontologies.farmopt.FarmConstraint;
import org.seamless_ip.ontologies.farmopt.FarmQuota;
import org.seamless_ip.ontologies.farmopt.IPolicyMeasure;
import org.seamless_ip.ontologies.farmopt.Price;
import org.seamless_ip.ontologies.farmopt.Subsidy;
import org.seamless_ip.ontologies.farmopt.YieldTrend;
import org.seamless_ip.ontologies.seamproj.PolicyOption;
import org.seamless_ip.services.transferobjects.capri.BasicPremiumListTO;
import org.seamless_ip.services.transferobjects.capri.BilateralTariffListTO;
import org.seamless_ip.services.transferobjects.capri.CouplingDegreeListTO;
import org.seamless_ip.services.transferobjects.capri.GlobalTariffListTO;
import org.seamless_ip.services.transferobjects.capri.QuotaCountryListTO;
import org.seamless_ip.services.transferobjects.capri.SetAsideRegulationListTO;
import org.seamless_ip.services.transferobjects.capri.SubsidisedExportListTO;
import org.seamless_ip.services.transferobjects.capri.TradeReformProposalListTO;
import org.seamless_ip.services.transferobjects.farmopt.FarmConstraintListTO;
import org.seamless_ip.services.transferobjects.farmopt.FarmQuotaListTO;
import org.seamless_ip.services.transferobjects.farmopt.IPolicyMeasureListTO;
import org.seamless_ip.services.transferobjects.farmopt.PriceListTO;
import org.seamless_ip.services.transferobjects.farmopt.SubsidyListTO;
import org.seamless_ip.services.transferobjects.farmopt.YieldTrendListTO;
import org.seamless_ip.services.transferobjects.seamproj.NarrativeTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.seamproj.PolicyOption", readonly=false, used=true)
@SuppressWarnings("serial")
public class PolicyOptionTO extends AbstractTO implements TO<PolicyOptionTO, PolicyOption>, Serializable, Cloneable 	
{
	private YieldTrendListTO _yieldtrend;		
	private TradeReformProposalListTO _tradereformproposals;		
	private SubsidyListTO _subsidies;		
	private SubsidisedExportListTO _subsidisedexports;		
	private SetAsideRegulationListTO _setasideregulations;		
	private QuotaCountryListTO _quotacountries;		
	private PriceListTO _pricechange;		
	private NarrativeTO _narrative;		
	private Long _id;		
	private IPolicyMeasureListTO<Object, Object> _policymeasures;
	private GlobalTariffListTO _globaltariffs;		
	private FarmQuotaListTO _farmquotas;		
	private FarmConstraintListTO _farmconstraints;		
	private CouplingDegreeListTO _couplingdegrees;		
	private Boolean _tradereformactivated;		
	private BilateralTariffListTO _bilateraltariffs;		
	private BasicPremiumListTO _basicpremiums;		



	public PolicyOptionTO()
	{
		super();
		_yieldtrend = new YieldTrendListTO();
		_tradereformproposals = new TradeReformProposalListTO();
		_subsidies = new SubsidyListTO();
		_subsidisedexports = new SubsidisedExportListTO();
		_setasideregulations = new SetAsideRegulationListTO();
		_quotacountries = new QuotaCountryListTO();
		_pricechange = new PriceListTO();
		_narrative = new NarrativeTO();
		_policymeasures = new IPolicyMeasureListTO<Object, Object>();
		_globaltariffs = new GlobalTariffListTO();
		_farmquotas = new FarmQuotaListTO();
		_farmconstraints = new FarmConstraintListTO();
		_couplingdegrees = new CouplingDegreeListTO();
		_bilateraltariffs = new BilateralTariffListTO();
		_basicpremiums = new BasicPremiumListTO();
	}

	public static PolicyOption createDBInstance()
	{
		PolicyOption dbItem = new PolicyOption();
		dbItem.setBasicPremiums(new HashSet<BasicPremium>());
		dbItem.setBilateralTariffs(new HashSet<BilateralTariff>());
		dbItem.setCouplingDegrees(new HashSet<CouplingDegree>());
		dbItem.setFarmConstraints(new HashSet<FarmConstraint>());
		dbItem.setFarmQuotas(new HashSet<FarmQuota>());
		dbItem.setGlobalTariffs(new HashSet<GlobalTariff>());
		dbItem.setNarrative(NarrativeTO.createDBInstance());
		dbItem.setPolicyMeasures(new HashSet<IPolicyMeasure>());
		dbItem.setPriceChange(new HashSet<Price>());
		dbItem.setQuotaCountries(new HashSet<QuotaCountry>());
		dbItem.setSetAsideRegulations(new HashSet<SetAsideRegulation>());
		dbItem.setSubsidies(new HashSet<Subsidy>());
		dbItem.setSubsidisedExports(new HashSet<SubsidisedExport>());
		dbItem.setTradeReformActivated(new Boolean(false));
		dbItem.setTradeReformProposals(new HashSet<TradeReformProposal>());
		dbItem.setYieldTrend(new HashSet<YieldTrend>());
		return dbItem;
	}


	public static PolicyOption createDBInstance(PolicyOptionTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(PolicyOption dbItem)
    {
        if (dbItem != null) {
            dbItem.setBasicPremiums(null);
            dbItem.setBilateralTariffs(null);
            dbItem.setCouplingDegrees(null);
            dbItem.setFarmConstraints(null);
            dbItem.setFarmQuotas(null);
            dbItem.setGlobalTariffs(null);
            dbItem.setNarrative(null);
            dbItem.setPolicyMeasures(null);
            dbItem.setPriceChange(null);
            dbItem.setQuotaCountries(null);
            dbItem.setSetAsideRegulations(null);
            dbItem.setSubsidies(null);
            dbItem.setSubsidisedExports(null);
            dbItem.setTradeReformProposals(null);
            dbItem.setYieldTrend(null);
        }
    }

    public PolicyOptionTO assignFrom(PolicyOption target)	
	{
		if (target != null)
		{
			try {
				_basicpremiums .assignFrom(target.getBasicPremiums());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_bilateraltariffs .assignFrom(target.getBilateralTariffs());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_couplingdegrees .assignFrom(target.getCouplingDegrees());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_farmconstraints .assignFrom(target.getFarmConstraints());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_farmquotas .assignFrom(target.getFarmQuotas());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_globaltariffs .assignFrom(target.getGlobalTariffs());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_narrative .assignFrom(target.getNarrative());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_policymeasures .assignFrom(target.getPolicyMeasures());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_pricechange .assignFrom(target.getPriceChange());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_quotacountries .assignFrom(target.getQuotaCountries());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_setasideregulations .assignFrom(target.getSetAsideRegulations());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_subsidies .assignFrom(target.getSubsidies());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_subsidisedexports .assignFrom(target.getSubsidisedExports());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_tradereformactivated = target.getTradeReformActivated();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_tradereformproposals .assignFrom(target.getTradeReformProposals());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_yieldtrend .assignFrom(target.getYieldTrend());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
		}
		return this;
	}
    
    public PolicyOption assignTo(PolicyOption target)
    {
        if (target != null) 
        {
			target.setBasicPremiums(_basicpremiums .assignTo(target.getBasicPremiums()));
			target.setBilateralTariffs(_bilateraltariffs .assignTo(target.getBilateralTariffs()));
			target.setCouplingDegrees(_couplingdegrees .assignTo(target.getCouplingDegrees()));
			target.setFarmConstraints(_farmconstraints .assignTo(target.getFarmConstraints()));
			target.setFarmQuotas(_farmquotas .assignTo(target.getFarmQuotas()));
			target.setGlobalTariffs(_globaltariffs .assignTo(target.getGlobalTariffs()));
			target.setNarrative(_narrative .assignTo(target.getNarrative()));
			//TODO: manage correctly reference to interface, following code give error: target.setPolicyMeasures(_policymeasures .assignTo(target.getPolicyMeasures()));
			target.setPriceChange(_pricechange .assignTo(target.getPriceChange()));
			target.setQuotaCountries(_quotacountries .assignTo(target.getQuotaCountries()));
			target.setSetAsideRegulations(_setasideregulations .assignTo(target.getSetAsideRegulations()));
			target.setSubsidies(_subsidies .assignTo(target.getSubsidies()));
			target.setSubsidisedExports(_subsidisedexports .assignTo(target.getSubsidisedExports()));
			target.setTradeReformProposals(_tradereformproposals .assignTo(target.getTradeReformProposals()));
			target.setYieldTrend(_yieldtrend .assignTo(target.getYieldTrend()));
			target.setId(_id);			
			target.setTradeReformActivated(_tradereformactivated);			
        }
        return target;
    }	
    
    public boolean equalsTo(PolicyOption target)
    {
        if (target == null)
            return false;

        PolicyOptionTO targetTO = new PolicyOptionTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public PolicyOptionTO clone()
    {
    	PolicyOptionTO clone = new PolicyOptionTO();
		clone.setBasicPremiums(_basicpremiums);
		clone.setBilateralTariffs(_bilateraltariffs);
		clone.setCouplingDegrees(_couplingdegrees);
		clone.setFarmConstraints(_farmconstraints);
		clone.setFarmQuotas(_farmquotas);
		clone.setGlobalTariffs(_globaltariffs);
		clone.setId(_id);
		clone.setNarrative(_narrative);
		clone.setPolicyMeasures(_policymeasures);
		clone.setPriceChange(_pricechange);
		clone.setQuotaCountries(_quotacountries);
		clone.setSetAsideRegulations(_setasideregulations);
		clone.setSubsidies(_subsidies);
		clone.setSubsidisedExports(_subsidisedexports);
		clone.setTradeReformActivated(_tradereformactivated);
		clone.setTradeReformProposals(_tradereformproposals);
		clone.setYieldTrend(_yieldtrend);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_yieldtrend != null ? _yieldtrend .hashCode() : 0);
		result = 31 * result + (_tradereformproposals != null ? _tradereformproposals .hashCode() : 0);
		result = 31 * result + (_subsidies != null ? _subsidies .hashCode() : 0);
		result = 31 * result + (_subsidisedexports != null ? _subsidisedexports .hashCode() : 0);
		result = 31 * result + (_setasideregulations != null ? _setasideregulations .hashCode() : 0);
		result = 31 * result + (_quotacountries != null ? _quotacountries .hashCode() : 0);
		result = 31 * result + (_pricechange != null ? _pricechange .hashCode() : 0);
		result = 31 * result + (_narrative != null ? _narrative .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_policymeasures != null ? _policymeasures .hashCode() : 0);
		result = 31 * result + (_globaltariffs != null ? _globaltariffs .hashCode() : 0);
		result = 31 * result + (_farmquotas != null ? _farmquotas .hashCode() : 0);
		result = 31 * result + (_farmconstraints != null ? _farmconstraints .hashCode() : 0);
		result = 31 * result + (_couplingdegrees != null ? _couplingdegrees .hashCode() : 0);
		result = 31 * result + (_tradereformactivated != null ? _tradereformactivated .hashCode() : 0);
		result = 31 * result + (_bilateraltariffs != null ? _bilateraltariffs .hashCode() : 0);
		result = 31 * result + (_basicpremiums != null ? _basicpremiums .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof PolicyOptionTO)) return false;

        PolicyOptionTO classTO = (PolicyOptionTO) o;

		if (_yieldtrend != null ? !_yieldtrend .equals(classTO._yieldtrend) : classTO._yieldtrend != null)
			return false;
		if (_tradereformproposals != null ? !_tradereformproposals .equals(classTO._tradereformproposals) : classTO._tradereformproposals != null)
			return false;
		if (_subsidies != null ? !_subsidies .equals(classTO._subsidies) : classTO._subsidies != null)
			return false;
		if (_subsidisedexports != null ? !_subsidisedexports .equals(classTO._subsidisedexports) : classTO._subsidisedexports != null)
			return false;
		if (_setasideregulations != null ? !_setasideregulations .equals(classTO._setasideregulations) : classTO._setasideregulations != null)
			return false;
		if (_quotacountries != null ? !_quotacountries .equals(classTO._quotacountries) : classTO._quotacountries != null)
			return false;
		if (_pricechange != null ? !_pricechange .equals(classTO._pricechange) : classTO._pricechange != null)
			return false;
		if (_narrative != null ? !_narrative .equals(classTO._narrative) : classTO._narrative != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_policymeasures != null ? !_policymeasures .equals(classTO._policymeasures) : classTO._policymeasures != null)
			return false;
		if (_globaltariffs != null ? !_globaltariffs .equals(classTO._globaltariffs) : classTO._globaltariffs != null)
			return false;
		if (_farmquotas != null ? !_farmquotas .equals(classTO._farmquotas) : classTO._farmquotas != null)
			return false;
		if (_farmconstraints != null ? !_farmconstraints .equals(classTO._farmconstraints) : classTO._farmconstraints != null)
			return false;
		if (_couplingdegrees != null ? !_couplingdegrees .equals(classTO._couplingdegrees) : classTO._couplingdegrees != null)
			return false;
		if (_tradereformactivated != null ? !_tradereformactivated .equals(classTO._tradereformactivated) : classTO._tradereformactivated != null)
			return false;
		if (_bilateraltariffs != null ? !_bilateraltariffs .equals(classTO._bilateraltariffs) : classTO._bilateraltariffs != null)
			return false;
		if (_basicpremiums != null ? !_basicpremiums .equals(classTO._basicpremiums) : classTO._basicpremiums != null)
			return false;
        
        return true;
    }
    
    public BasicPremiumListTO getBasicPremiums()
    {
		return _basicpremiums;
    }
    public BilateralTariffListTO getBilateralTariffs()
    {
		return _bilateraltariffs;
    }
    public CouplingDegreeListTO getCouplingDegrees()
    {
		return _couplingdegrees;
    }
    public FarmConstraintListTO getFarmConstraints()
    {
		return _farmconstraints;
    }
    public FarmQuotaListTO getFarmQuotas()
    {
		return _farmquotas;
    }
    public GlobalTariffListTO getGlobalTariffs()
    {
		return _globaltariffs;
    }
    public Long getId()
    {
		return _id;
    }
    public NarrativeTO getNarrative()
    {
		return _narrative;
    }
	@SuppressWarnings("unchecked")
    public IPolicyMeasureListTO getPolicyMeasures()
    {
		return _policymeasures;
    }
    public PriceListTO getPriceChange()
    {
		return _pricechange;
    }
    public QuotaCountryListTO getQuotaCountries()
    {
		return _quotacountries;
    }
    public SetAsideRegulationListTO getSetAsideRegulations()
    {
		return _setasideregulations;
    }
    public SubsidyListTO getSubsidies()
    {
		return _subsidies;
    }
    public SubsidisedExportListTO getSubsidisedExports()
    {
		return _subsidisedexports;
    }
    public Boolean getTradeReformActivated()
    {
		return _tradereformactivated;
    }
    public TradeReformProposalListTO getTradeReformProposals()
    {
		return _tradereformproposals;
    }
    public YieldTrendListTO getYieldTrend()
    {
		return _yieldtrend;
    }
    public void setBasicPremiums(BasicPremiumListTO value)
    {
		_basicpremiums = value;
    }
    public void setBilateralTariffs(BilateralTariffListTO value)
    {
		_bilateraltariffs = value;
    }
    public void setCouplingDegrees(CouplingDegreeListTO value)
    {
		_couplingdegrees = value;
    }
    public void setFarmConstraints(FarmConstraintListTO value)
    {
		_farmconstraints = value;
    }
    public void setFarmQuotas(FarmQuotaListTO value)
    {
		_farmquotas = value;
    }
    public void setGlobalTariffs(GlobalTariffListTO value)
    {
		_globaltariffs = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setNarrative(NarrativeTO value)
    {
		_narrative = value;
    }
	@SuppressWarnings("unchecked")
    public void setPolicyMeasures(IPolicyMeasureListTO value)
    {
		_policymeasures = value;
    }
    public void setPriceChange(PriceListTO value)
    {
		_pricechange = value;
    }
    public void setQuotaCountries(QuotaCountryListTO value)
    {
		_quotacountries = value;
    }
    public void setSetAsideRegulations(SetAsideRegulationListTO value)
    {
		_setasideregulations = value;
    }
    public void setSubsidies(SubsidyListTO value)
    {
		_subsidies = value;
    }
    public void setSubsidisedExports(SubsidisedExportListTO value)
    {
		_subsidisedexports = value;
    }
    public void setTradeReformActivated(Boolean value)
    {
		_tradereformactivated = value;
    }
    public void setTradeReformProposals(TradeReformProposalListTO value)
    {
		_tradereformproposals = value;
    }
    public void setYieldTrend(YieldTrendListTO value)
    {
		_yieldtrend = value;
    }
}