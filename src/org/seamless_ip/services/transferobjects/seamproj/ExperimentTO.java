/* gromit: ExperimentTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.seamproj;

import java.io.Serializable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import org.seamless_ip.ontologies.seamproj.Experiment;
import org.seamless_ip.services.transferobjects.seamproj.ModelChainTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.seamproj.Experiment", readonly=false, used=true)
@SuppressWarnings("serial")
public class ExperimentTO extends AbstractTO implements TO<ExperimentTO, Experiment>, Serializable, Cloneable 	
{
	private String _title;		
	private String _modelzip;		
	private String _description;		
	private ModelChainTO _modelchain;		
	private Long _id;		
	private Integer _state;		
	private Boolean _published;		
	private Boolean _modelzipsaved;		
	private String _baseyeartitle/*transient field*/;		
	private Long _baseyearid/*transient field*/;		
	private String _baselinetitle/*transient field*/;		
	private Long _baselineid/*transient field*/;		
	private Boolean _baseline;		

	/* 
	 * Notes: field commented as 'transient field' are only used to exchange information
	 * between client and server.
	 * 
	 * - They are not persistent (it doesn't exists any field on the database to save that values)
	 * - They are not assigned in the TO object method (assignFrom, assignTO)
	 * - They are not considered in the TO equality methods (hashCode, equals)
	 * 
	 * To use this field you have to do the assignment manually (e.g on the DAO classes that use the 
	 * TO). In the client you will be able to check the content of the filed. 
	 * 
	 */


	public ExperimentTO()
	{
		super();
		_modelchain = new ModelChainTO();
	}

	public static Experiment createDBInstance()
	{
		Experiment dbItem = new Experiment();
		dbItem.setBaseline(new Boolean(false));
		dbItem.setModelChain(ModelChainTO.createDBInstance());
		dbItem.setModelZipSaved(new Boolean(false));
		dbItem.setPublished(new Boolean(false));
		dbItem.setState(new Integer(0));
		return dbItem;
	}


	public static Experiment createDBInstance(ExperimentTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(Experiment dbItem)
    {
        if (dbItem != null) {
            dbItem.setModelChain(null);
        }
    }

    public ExperimentTO assignFrom(Experiment target)	
	{
		if (target != null)
		{
			try {
					_baseline = target.getBaseline();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_description = target.getDescription();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_modelchain .assignFrom(target.getModelChain());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_modelzip = target.getModelZip();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_modelzipsaved = target.getModelZipSaved();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_published = target.getPublished();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_state = target.getState();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_title = target.getTitle();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public Experiment assignTo(Experiment target)
    {
        if (target != null) 
        {
			target.setModelChain(_modelchain .assignTo(target.getModelChain()));
			target.setBaseline(_baseline);			
			target.setDescription(_description);			
			target.setId(_id);			
			target.setModelZip(_modelzip);			
			target.setModelZipSaved(_modelzipsaved);			
			target.setPublished(_published);			
			target.setState(_state);			
			target.setTitle(_title);			
        }
        return target;
    }	
    
    public boolean equalsTo(Experiment target)
    {
        if (target == null)
            return false;

        ExperimentTO targetTO = new ExperimentTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public ExperimentTO clone()
    {
    	ExperimentTO clone = new ExperimentTO();
		clone.setBaseline(_baseline);
		clone.setDescription(_description);
		clone.setId(_id);
		clone.setModelChain(_modelchain);
		clone.setModelZip(_modelzip);
		clone.setModelZipSaved(_modelzipsaved);
		clone.setPublished(_published);
		clone.setState(_state);
		clone.setTitle(_title);
		clone.setbaselineid(_baselineid/*transient field*/);
		clone.setbaselinetitle(_baselinetitle/*transient field*/);
		clone.setbaseyearid(_baseyearid/*transient field*/);
		clone.setbaseyeartitle(_baseyeartitle/*transient field*/);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_title != null ? _title .hashCode() : 0);
		result = 31 * result + (_modelzip != null ? _modelzip .hashCode() : 0);
		result = 31 * result + (_description != null ? _description .hashCode() : 0);
		result = 31 * result + (_modelchain != null ? _modelchain .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_state != null ? _state .hashCode() : 0);
		result = 31 * result + (_published != null ? _published .hashCode() : 0);
		result = 31 * result + (_modelzipsaved != null ? _modelzipsaved .hashCode() : 0);
		result = 31 * result + (_baseline != null ? _baseline .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof ExperimentTO)) return false;

        ExperimentTO classTO = (ExperimentTO) o;

		if (_title != null ? !_title .equals(classTO._title) : classTO._title != null)
			return false;
		if (_modelzip != null ? !_modelzip .equals(classTO._modelzip) : classTO._modelzip != null)
			return false;
		if (_description != null ? !_description .equals(classTO._description) : classTO._description != null)
			return false;
		if (_modelchain != null ? !_modelchain .equals(classTO._modelchain) : classTO._modelchain != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_state != null ? !_state .equals(classTO._state) : classTO._state != null)
			return false;
		if (_published != null ? !_published .equals(classTO._published) : classTO._published != null)
			return false;
		if (_modelzipsaved != null ? !_modelzipsaved .equals(classTO._modelzipsaved) : classTO._modelzipsaved != null)
			return false;
		if (_baseline != null ? !_baseline .equals(classTO._baseline) : classTO._baseline != null)
			return false;
        
        return true;
    }
    
    public Boolean getBaseline()
    {
		return _baseline;
    }
    public String getDescription()
    {
		return _description;
    }
    public Long getId()
    {
		return _id;
    }
    public ModelChainTO getModelChain()
    {
		return _modelchain;
    }
    public String getModelZip()
    {
		return _modelzip;
    }
    public Boolean getModelZipSaved()
    {
		return _modelzipsaved;
    }
    public Boolean getPublished()
    {
		return _published;
    }
    public Integer getState()
    {
		return _state;
    }
    public String getTitle()
    {
		return _title;
    }
    public Long getbaselineid()
    {
		return _baselineid/*transient field*/;
    }
    public String getbaselinetitle()
    {
		return _baselinetitle/*transient field*/;
    }
    public Long getbaseyearid()
    {
		return _baseyearid/*transient field*/;
    }
    public String getbaseyeartitle()
    {
		return _baseyeartitle/*transient field*/;
    }
    public void setBaseline(Boolean value)
    {
		_baseline = value;
    }
    public void setDescription(String value)
    {
		_description = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setModelChain(ModelChainTO value)
    {
		_modelchain = value;
    }
    public void setModelZip(String value)
    {
		_modelzip = value;
    }
    public void setModelZipSaved(Boolean value)
    {
		_modelzipsaved = value;
    }
    public void setPublished(Boolean value)
    {
		_published = value;
    }
    public void setState(Integer value)
    {
		_state = value;
    }
    public void setTitle(String value)
    {
		_title = value;
    }
    public void setbaselineid(Long value)
    {
		_baselineid/*transient field*/ = value;
    }
    public void setbaselinetitle(String value)
    {
		_baselinetitle/*transient field*/ = value;
    }
    public void setbaseyearid(Long value)
    {
		_baseyearid/*transient field*/ = value;
    }
    public void setbaseyeartitle(String value)
    {
		_baseyeartitle/*transient field*/ = value;
    }
}