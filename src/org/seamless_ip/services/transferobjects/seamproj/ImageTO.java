/* gromit: ImageTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.seamproj;

import java.io.Serializable;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import org.seamless_ip.ontologies.seamproj.Image;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.seamproj.Image", readonly=false, used=true)
@SuppressWarnings("serial")
public class ImageTO extends AbstractTO implements TO<ImageTO, Image>, Serializable, Cloneable 	
{
	private String _modificationdate;		
	private String _mimetype;		
	private String _filename;		
	private String _creationdate;		
	private Long _id;		
	private Integer _size;		



	public ImageTO()
	{
		super();
	}

	public static Image createDBInstance()
	{
		Image dbItem = new Image();
		dbItem.setSize(new Integer(0));
		return dbItem;
	}


	public static Image createDBInstance(ImageTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(Image dbItem)
    {
        if (dbItem != null) {
        }
    }

    public ImageTO assignFrom(Image target)	
	{
		if (target != null)
		{
			try {
					_creationdate = target.getCreationDate();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_filename = target.getFilename();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_mimetype = target.getMimeType();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_modificationdate = target.getModificationDate();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_size = target.getSize();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public Image assignTo(Image target)
    {
        if (target != null) 
        {
			target.setCreationDate(_creationdate);			
			target.setFilename(_filename);			
			target.setId(_id);			
			target.setMimeType(_mimetype);			
			target.setModificationDate(_modificationdate);			
			target.setSize(_size);			
        }
        return target;
    }	
    
    public boolean equalsTo(Image target)
    {
        if (target == null)
            return false;

        ImageTO targetTO = new ImageTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public ImageTO clone()
    {
    	ImageTO clone = new ImageTO();
		clone.setCreationDate(_creationdate);
		clone.setFilename(_filename);
		clone.setId(_id);
		clone.setMimeType(_mimetype);
		clone.setModificationDate(_modificationdate);
		clone.setSize(_size);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_modificationdate != null ? _modificationdate .hashCode() : 0);
		result = 31 * result + (_mimetype != null ? _mimetype .hashCode() : 0);
		result = 31 * result + (_filename != null ? _filename .hashCode() : 0);
		result = 31 * result + (_creationdate != null ? _creationdate .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_size != null ? _size .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof ImageTO)) return false;

        ImageTO classTO = (ImageTO) o;

		if (_modificationdate != null ? !_modificationdate .equals(classTO._modificationdate) : classTO._modificationdate != null)
			return false;
		if (_mimetype != null ? !_mimetype .equals(classTO._mimetype) : classTO._mimetype != null)
			return false;
		if (_filename != null ? !_filename .equals(classTO._filename) : classTO._filename != null)
			return false;
		if (_creationdate != null ? !_creationdate .equals(classTO._creationdate) : classTO._creationdate != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_size != null ? !_size .equals(classTO._size) : classTO._size != null)
			return false;
        
        return true;
    }
    
    public String getCreationDate()
    {
		return _creationdate;
    }
    public String getFilename()
    {
		return _filename;
    }
    public Long getId()
    {
		return _id;
    }
    public String getMimeType()
    {
		return _mimetype;
    }
    public String getModificationDate()
    {
		return _modificationdate;
    }
    public Integer getSize()
    {
		return _size;
    }
    public void setCreationDate(String value)
    {
		_creationdate = value;
    }
    public void setFilename(String value)
    {
		_filename = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setMimeType(String value)
    {
		_mimetype = value;
    }
    public void setModificationDate(String value)
    {
		_modificationdate = value;
    }
    public void setSize(Integer value)
    {
		_size = value;
    }
}