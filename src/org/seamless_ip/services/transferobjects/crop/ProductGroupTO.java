/* gromit: ProductGroupTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.crop;

import java.io.Serializable;
import java.lang.Long;
import java.lang.String;
import org.seamless_ip.ontologies.crop.ProductGroup;
import org.seamless_ip.services.transferobjects.capri.IProductionItemTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.crop.ProductGroup", readonly=false, used=true)
@SuppressWarnings("serial")
public class ProductGroupTO extends AbstractTO implements IProductionItemTO<ProductGroupTO, ProductGroup>, Serializable, Cloneable 	
{
	private String _label_en;		
	private Long _id;		



	public ProductGroupTO()
	{
		super();
	}

	public static ProductGroup createDBInstance()
	{
		ProductGroup dbItem = new ProductGroup();
		return dbItem;
	}


	public static ProductGroup createDBInstance(ProductGroupTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(ProductGroup dbItem)
    {
        if (dbItem != null) {
        }
    }

    public ProductGroupTO assignFrom(ProductGroup target)	
	{
		if (target != null)
		{
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_label_en = target.getLabel_en();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public ProductGroup assignTo(ProductGroup target)
    {
        if (target != null) 
        {
			target.setId(_id);			
			target.setLabel_en(_label_en);			
        }
        return target;
    }	
    
    public boolean equalsTo(ProductGroup target)
    {
        if (target == null)
            return false;

        ProductGroupTO targetTO = new ProductGroupTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public ProductGroupTO clone()
    {
    	ProductGroupTO clone = new ProductGroupTO();
		clone.setId(_id);
		clone.setLabel_en(_label_en);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_label_en != null ? _label_en .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof ProductGroupTO)) return false;

        ProductGroupTO classTO = (ProductGroupTO) o;

		if (_label_en != null ? !_label_en .equals(classTO._label_en) : classTO._label_en != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
        
        return true;
    }
    
    public Long getId()
    {
		return _id;
    }
    public String getLabel_en()
    {
		return _label_en;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setLabel_en(String value)
    {
		_label_en = value;
    }
}