/* gromit: IndicatorGroupTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.indi;

import java.io.Serializable;
import java.lang.Long;
import java.lang.String;
import java.util.HashSet;
import org.seamless_ip.ontologies.indi.Dimension;
import org.seamless_ip.ontologies.indi.Domain;
import org.seamless_ip.ontologies.indi.IndicatorGroup;
import org.seamless_ip.ontologies.indi.Subtheme;
import org.seamless_ip.services.transferobjects.indi.DimensionListTO;
import org.seamless_ip.services.transferobjects.indi.DomainListTO;
import org.seamless_ip.services.transferobjects.indi.SubthemeListTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.indi.IndicatorGroup", readonly=false, used=true)
@SuppressWarnings("serial")
public class IndicatorGroupTO extends AbstractTO implements TO<IndicatorGroupTO, IndicatorGroup>, Serializable, Cloneable 	
{
	private SubthemeListTO _subthemes;		
	private String _label_en;		
	private String _factsheet;		
	private String _description;		
	private Long _id;		
	private DomainListTO _domains;		
	private DimensionListTO _dimensions;		



	public IndicatorGroupTO()
	{
		super();
		_subthemes = new SubthemeListTO();
		_domains = new DomainListTO();
		_dimensions = new DimensionListTO();
	}

	public static IndicatorGroup createDBInstance()
	{
		IndicatorGroup dbItem = new IndicatorGroup();
		dbItem.setDimensions(new HashSet<Dimension>());
		dbItem.setDomains(new HashSet<Domain>());
		dbItem.setSubthemes(new HashSet<Subtheme>());
		return dbItem;
	}


	public static IndicatorGroup createDBInstance(IndicatorGroupTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(IndicatorGroup dbItem)
    {
        if (dbItem != null) {
            dbItem.setDimensions(null);
            dbItem.setDomains(null);
            dbItem.setSubthemes(null);
        }
    }

    public IndicatorGroupTO assignFrom(IndicatorGroup target)	
	{
		if (target != null)
		{
			try {
					_description = target.getDescription();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_dimensions .assignFrom(target.getDimensions());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_domains .assignFrom(target.getDomains());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_factsheet = target.getFactSheet();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_label_en = target.getLabel_en();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_subthemes .assignFrom(target.getSubthemes());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
		}
		return this;
	}
    
    public IndicatorGroup assignTo(IndicatorGroup target)
    {
        if (target != null) 
        {
			target.setDimensions(_dimensions .assignTo(target.getDimensions()));
			target.setDomains(_domains .assignTo(target.getDomains()));
			target.setSubthemes(_subthemes .assignTo(target.getSubthemes()));
			target.setDescription(_description);			
			target.setFactSheet(_factsheet);			
			target.setId(_id);			
			target.setLabel_en(_label_en);			
        }
        return target;
    }	
    
    public boolean equalsTo(IndicatorGroup target)
    {
        if (target == null)
            return false;

        IndicatorGroupTO targetTO = new IndicatorGroupTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public IndicatorGroupTO clone()
    {
    	IndicatorGroupTO clone = new IndicatorGroupTO();
		clone.setDescription(_description);
		clone.setDimensions(_dimensions);
		clone.setDomains(_domains);
		clone.setFactSheet(_factsheet);
		clone.setId(_id);
		clone.setLabel_en(_label_en);
		clone.setSubthemes(_subthemes);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_subthemes != null ? _subthemes .hashCode() : 0);
		result = 31 * result + (_label_en != null ? _label_en .hashCode() : 0);
		result = 31 * result + (_factsheet != null ? _factsheet .hashCode() : 0);
		result = 31 * result + (_description != null ? _description .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_domains != null ? _domains .hashCode() : 0);
		result = 31 * result + (_dimensions != null ? _dimensions .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof IndicatorGroupTO)) return false;

        IndicatorGroupTO classTO = (IndicatorGroupTO) o;

		if (_subthemes != null ? !_subthemes .equals(classTO._subthemes) : classTO._subthemes != null)
			return false;
		if (_label_en != null ? !_label_en .equals(classTO._label_en) : classTO._label_en != null)
			return false;
		if (_factsheet != null ? !_factsheet .equals(classTO._factsheet) : classTO._factsheet != null)
			return false;
		if (_description != null ? !_description .equals(classTO._description) : classTO._description != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_domains != null ? !_domains .equals(classTO._domains) : classTO._domains != null)
			return false;
		if (_dimensions != null ? !_dimensions .equals(classTO._dimensions) : classTO._dimensions != null)
			return false;
        
        return true;
    }
    
    public String getDescription()
    {
		return _description;
    }
    public DimensionListTO getDimensions()
    {
		return _dimensions;
    }
    public DomainListTO getDomains()
    {
		return _domains;
    }
    public String getFactSheet()
    {
		return _factsheet;
    }
    public Long getId()
    {
		return _id;
    }
    public String getLabel_en()
    {
		return _label_en;
    }
    public SubthemeListTO getSubthemes()
    {
		return _subthemes;
    }
    public void setDescription(String value)
    {
		_description = value;
    }
    public void setDimensions(DimensionListTO value)
    {
		_dimensions = value;
    }
    public void setDomains(DomainListTO value)
    {
		_domains = value;
    }
    public void setFactSheet(String value)
    {
		_factsheet = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setLabel_en(String value)
    {
		_label_en = value;
    }
    public void setSubthemes(SubthemeListTO value)
    {
		_subthemes = value;
    }
}