/* gromit: RepresentativeFarmTO.java
 * ==============================================================================
 * This code was generated by a tool and later manually updated to add some
 * transient information from the FarmInformationAnnual class that was added
 * to the ontology and needs to be displayed in the user interface.
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.farm;

import java.io.Serializable;
import java.lang.Long;
import java.lang.String;

import org.hibernate.HibernateException;
import org.seamless_ip.ontologies.farm.RepresentativeFarm;
import org.seamless_ip.services.transferobjects.farm.FADNregionTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.farm.RepresentativeFarm", readonly=false, used=true)
@SuppressWarnings("serial")
public class RepresentativeFarmTO extends AbstractTO implements TO<RepresentativeFarmTO, RepresentativeFarm>, Serializable, Cloneable 	
{
	//If the class is not is not auto-generated...please add the following static field.
	//There is a call to it on class org.seamless_ip.services.transferobjects.utils.EditedCodeNotOverwritten
	//In this way the compiler will help to avoid the override of your code with the generated version!
	public static int notOverwriteRepresentativeFarmTO;
	
	private Boolean _selected/*transient field*/;		
	private String _description;		
	private Long _id;		
	private FADNregionTO _fadnregion;
	private int _year;
	
	// transient fields
	private float representedFarms; // from FarmInformationAnnual
	private float utilisedAgriculturalAreaAvgPerFarm; // from FarmInformationAnnual divided by representedFarms
	private float labourInputsAvgPerFarm; // from FarmInformationAnnual divided by representedFarms
	
	/* 
	 * Notes: field commented as 'transient field' are only used to exchange information
	 * between client and server.
	 * 
	 * - They are not persistent (it doesn't exists any field on the database to save that values)
	 * - They are not assigned in the TO object method (assignFrom, assignTO)
	 * - They are not considered in the TO equality methods (hashCode, equals)
	 * 
	 * To use this field you have to do the assignment manually (e.g on the DAO classes that use the 
	 * TO). In the client you will be able to check the content of the filed. 
	 * 
	 */


	public RepresentativeFarmTO() {
		super();
		_fadnregion = new FADNregionTO();
	}

	
	public static RepresentativeFarm createDBInstance() {
		RepresentativeFarm dbItem = new RepresentativeFarm();
		dbItem.setFADNRegion(FADNregionTO.createDBInstance());
		return dbItem;
	}


	public static RepresentativeFarm createDBInstance(RepresentativeFarmTO toItem) {
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
	
    public static void releaseDBInstance(RepresentativeFarm dbItem) {
        if (dbItem != null) {
            dbItem.setFADNRegion(null);
        }
    }

    
    public RepresentativeFarmTO assignFrom(RepresentativeFarm target) {
		if (target != null) {
			try {
				_id = target.getId();
				_description = target.getDescription();
				_fadnregion.assignFrom(target.getFADNRegion());
				_year = target.getYear();
			} catch(HibernateException e) {
				System.err.println("A Hibernate Exception occured");
				e.printStackTrace();
			}			
		}
		return this;
	}
    
    
    public RepresentativeFarm assignTo(RepresentativeFarm target) {
        if (target != null) {
			target.setId(_id);			
			target.setDescription(_description);
			target.setYear(_year);
			target.setFADNRegion(_fadnregion .assignTo(target.getFADNRegion()));
        }
        return target;
    }	
    
    
    public boolean equalsTo(RepresentativeFarm target) {
        if (target == null)
            return false;

        RepresentativeFarmTO targetTO = new RepresentativeFarmTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    
    @Override
    public RepresentativeFarmTO clone() {
    	RepresentativeFarmTO clone = new RepresentativeFarmTO();

    	// persistent fields
		clone.setId(_id);
		clone.setYear(_year);
		clone.setDescription(_description);
		clone.setFADNRegion(_fadnregion);
		
		// transient fields
		clone.setSelected(_selected);
		clone.setRepresentedFarms(representedFarms);
		clone.setLabourInputsAvgPerFarm(labourInputsAvgPerFarm);
		clone.setUtilisedAgriculturalAreaAvgPerFarm(utilisedAgriculturalAreaAvgPerFarm);
        return clone;
    }    

    
    @Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result
				+ ((_description == null) ? 0 : _description.hashCode());
		result = prime * result
				+ ((_fadnregion == null) ? 0 : _fadnregion.hashCode());
		result = prime * result + ((_id == null) ? 0 : _id.hashCode());
		result = prime * result + _year;
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		RepresentativeFarmTO other = (RepresentativeFarmTO) obj;
		if (_description == null) {
			if (other._description != null)
				return false;
		} else if (!_description.equals(other._description))
			return false;
		if (_fadnregion == null) {
			if (other._fadnregion != null)
				return false;
		} else if (!_fadnregion.equals(other._fadnregion))
			return false;
		if (_id == null) {
			if (other._id != null)
				return false;
		} else if (!_id.equals(other._id))
			return false;
		if (_year != other._year)
			return false;
		return true;
	}


	public String getDescription() {
		return _description;
    }
    
    public FADNregionTO getFADNRegion() {
		return _fadnregion;
    }
    
    public Long getId() {
		return _id;
    }
    
    public Boolean getSelected() {
		return _selected;
    }
    
    public void setDescription(String value) {
		_description = value;
    }
    
    public void setFADNRegion(FADNregionTO value) {
		_fadnregion = value;
    }
    
    public void setId(Long value) {
		_id = value;
    }
    
    public void setSelected(Boolean value) {
		_selected = value;
    }


	public int getYear() {
		return _year;
	}


	public void setYear(int year) {
		this._year = year;
	}


	public float getRepresentedFarms() {
		return representedFarms;
	}


	public void setRepresentedFarms(float representedFarms) {
		this.representedFarms = representedFarms;
	}


	public float getUtilisedAgriculturalAreaAvgPerFarm() {
		return utilisedAgriculturalAreaAvgPerFarm;
	}


	public void setUtilisedAgriculturalAreaAvgPerFarm(
			float utilisedAgriculturalAreaAvgPerFarm) {
		this.utilisedAgriculturalAreaAvgPerFarm = utilisedAgriculturalAreaAvgPerFarm;
	}


	public float getLabourInputsAvgPerFarm() {
		return labourInputsAvgPerFarm;
	}


	public void setLabourInputsAvgPerFarm(float labourInputsAvgPerFarm) {
		this.labourInputsAvgPerFarm = labourInputsAvgPerFarm;
	}
    
}