/* gromit: NUTSregionTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.farm;

import java.io.Serializable;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import org.seamless_ip.ontologies.farm.NUTSregion;
import org.seamless_ip.services.transferobjects.capri.CountryTO;
import org.seamless_ip.services.transferobjects.farm.FADNregionTO;
import org.seamless_ip.services.transferobjects.farm.IRegionTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.farm.NUTSregion", readonly=false, used=true)
@SuppressWarnings("serial")
public class NUTSregionTO extends AbstractTO implements IRegionTO<NUTSregionTO, NUTSregion>, Serializable, Cloneable 	
{
	private String _shapefileid;		
	private String _name;		
	private String _label_gms;		
	private Long _id;		
	private Integer _nutslevel;		
	private Float _referenceyieldnonirrigated;		
	private Float _referenceyieldirrigated;		
	private Float _nitrogenfixation;		
	private Float _nitrogendeposition;		
	private FADNregionTO _fadnregion;		
	private CountryTO _ofcountry;		



	public NUTSregionTO()
	{
		super();
		_fadnregion = new FADNregionTO();
		_ofcountry = new CountryTO();
	}

	public static NUTSregion createDBInstance()
	{
		NUTSregion dbItem = new NUTSregion();
		dbItem.setFADNRegion(FADNregionTO.createDBInstance());
		dbItem.setNutslevel(new Integer(0));
		dbItem.setOfCountry(CountryTO.createDBInstance());
		return dbItem;
	}


	public static NUTSregion createDBInstance(NUTSregionTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(NUTSregion dbItem)
    {
        if (dbItem != null) {
            dbItem.setFADNRegion(null);
            dbItem.setOfCountry(null);
        }
    }

    public NUTSregionTO assignFrom(NUTSregion target)	
	{
		if (target != null)
		{
			try {
				_fadnregion .assignFrom(target.getFADNRegion());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_label_gms = target.getLabel_gms();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_name = target.getName();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_nitrogendeposition = target.getNitrogenDeposition();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_nitrogenfixation = target.getNitrogenFixation();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_nutslevel = target.getNutslevel();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_ofcountry .assignFrom(target.getOfCountry());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_referenceyieldnonirrigated = target.getReferenceYieldNonIrrigated();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_referenceyieldirrigated = target.getReferenceYieldirrigated();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_shapefileid = target.getShapeFileID();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public NUTSregion assignTo(NUTSregion target)
    {
        if (target != null) 
        {
			target.setFADNRegion(_fadnregion .assignTo(target.getFADNRegion()));
			target.setOfCountry(_ofcountry .assignTo(target.getOfCountry()));
			target.setId(_id);			
			target.setLabel_gms(_label_gms);			
			target.setName(_name);			
			target.setNitrogenDeposition(_nitrogendeposition);			
			target.setNitrogenFixation(_nitrogenfixation);			
			target.setNutslevel(_nutslevel);			
			target.setReferenceYieldNonIrrigated(_referenceyieldnonirrigated);			
			target.setReferenceYieldirrigated(_referenceyieldirrigated);			
			target.setShapeFileID(_shapefileid);			
        }
        return target;
    }	
    
    public boolean equalsTo(NUTSregion target)
    {
        if (target == null)
            return false;

        NUTSregionTO targetTO = new NUTSregionTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public NUTSregionTO clone()
    {
    	NUTSregionTO clone = new NUTSregionTO();
		clone.setFADNRegion(_fadnregion);
		clone.setId(_id);
		clone.setLabel_gms(_label_gms);
		clone.setName(_name);
		clone.setNitrogenDeposition(_nitrogendeposition);
		clone.setNitrogenFixation(_nitrogenfixation);
		clone.setNutslevel(_nutslevel);
		clone.setOfCountry(_ofcountry);
		clone.setReferenceYieldNonIrrigated(_referenceyieldnonirrigated);
		clone.setReferenceYieldirrigated(_referenceyieldirrigated);
		clone.setShapeFileID(_shapefileid);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_shapefileid != null ? _shapefileid .hashCode() : 0);
		result = 31 * result + (_name != null ? _name .hashCode() : 0);
		result = 31 * result + (_label_gms != null ? _label_gms .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_nutslevel != null ? _nutslevel .hashCode() : 0);
		result = 31 * result + (_referenceyieldnonirrigated != null ? _referenceyieldnonirrigated .hashCode() : 0);
		result = 31 * result + (_referenceyieldirrigated != null ? _referenceyieldirrigated .hashCode() : 0);
		result = 31 * result + (_nitrogenfixation != null ? _nitrogenfixation .hashCode() : 0);
		result = 31 * result + (_nitrogendeposition != null ? _nitrogendeposition .hashCode() : 0);
		result = 31 * result + (_fadnregion != null ? _fadnregion .hashCode() : 0);
		result = 31 * result + (_ofcountry != null ? _ofcountry .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof NUTSregionTO)) return false;

        NUTSregionTO classTO = (NUTSregionTO) o;

		if (_shapefileid != null ? !_shapefileid .equals(classTO._shapefileid) : classTO._shapefileid != null)
			return false;
		if (_name != null ? !_name .equals(classTO._name) : classTO._name != null)
			return false;
		if (_label_gms != null ? !_label_gms .equals(classTO._label_gms) : classTO._label_gms != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_nutslevel != null ? !_nutslevel .equals(classTO._nutslevel) : classTO._nutslevel != null)
			return false;
		if (_referenceyieldnonirrigated != null ? !_referenceyieldnonirrigated .equals(classTO._referenceyieldnonirrigated) : classTO._referenceyieldnonirrigated != null)
			return false;
		if (_referenceyieldirrigated != null ? !_referenceyieldirrigated .equals(classTO._referenceyieldirrigated) : classTO._referenceyieldirrigated != null)
			return false;
		if (_nitrogenfixation != null ? !_nitrogenfixation .equals(classTO._nitrogenfixation) : classTO._nitrogenfixation != null)
			return false;
		if (_nitrogendeposition != null ? !_nitrogendeposition .equals(classTO._nitrogendeposition) : classTO._nitrogendeposition != null)
			return false;
		if (_fadnregion != null ? !_fadnregion .equals(classTO._fadnregion) : classTO._fadnregion != null)
			return false;
		if (_ofcountry != null ? !_ofcountry .equals(classTO._ofcountry) : classTO._ofcountry != null)
			return false;
        
        return true;
    }
    
    public FADNregionTO getFADNRegion()
    {
		return _fadnregion;
    }
    public Long getId()
    {
		return _id;
    }
    public String getLabel()
    {
		return _name;
    }
    public String getLabel_gms()
    {
		return _label_gms;
    }
    public String getName()
    {
		return _name;
    }
    public Float getNitrogenDeposition()
    {
		return _nitrogendeposition;
    }
    public Float getNitrogenFixation()
    {
		return _nitrogenfixation;
    }
    public Integer getNutslevel()
    {
		return _nutslevel;
    }
    public CountryTO getOfCountry()
    {
		return _ofcountry;
    }
    public Float getReferenceYieldNonIrrigated()
    {
		return _referenceyieldnonirrigated;
    }
    public Float getReferenceYieldirrigated()
    {
		return _referenceyieldirrigated;
    }
    public String getShapeFileID()
    {
		return _shapefileid;
    }
    public void setFADNRegion(FADNregionTO value)
    {
		_fadnregion = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setLabel_gms(String value)
    {
		_label_gms = value;
    }
    public void setName(String value)
    {
		_name = value;
    }
    public void setNitrogenDeposition(Float value)
    {
		_nitrogendeposition = value;
    }
    public void setNitrogenFixation(Float value)
    {
		_nitrogenfixation = value;
    }
    public void setNutslevel(Integer value)
    {
		_nutslevel = value;
    }
    public void setOfCountry(CountryTO value)
    {
		_ofcountry = value;
    }
    public void setReferenceYieldNonIrrigated(Float value)
    {
		_referenceyieldnonirrigated = value;
    }
    public void setReferenceYieldirrigated(Float value)
    {
		_referenceyieldirrigated = value;
    }
    public void setShapeFileID(String value)
    {
		_shapefileid = value;
    }
}