/* gromit: ProductionOrientationTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.prodent;

import java.io.Serializable;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.HashSet;
import org.seamless_ip.ontologies.livestock.BeefManagement;
import org.seamless_ip.ontologies.livestock.GrassManagementAlternative;
import org.seamless_ip.ontologies.prodent.ProductionOrientation;
import org.seamless_ip.services.transferobjects.livestock.BeefManagementListTO;
import org.seamless_ip.services.transferobjects.livestock.GrassManagementAlternativeListTO;
import org.seamless_ip.services.transferobjects.prodent.NutrientManagementTO;
import org.seamless_ip.services.transferobjects.prodent.WaterManagementTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.prodent.ProductionOrientation", readonly=false, used=true)
@SuppressWarnings("serial")
public class ProductionOrientationTO extends AbstractTO implements TO<ProductionOrientationTO, ProductionOrientation>, Serializable, Cloneable 	
{
	private WaterManagementTO _watermanagement;		
	private String _label_en;		
	private NutrientManagementTO _nutrientmanagement;		
	private Long _id;		
	private Integer _minrotationlength;		
	private Integer _maxrotationlength;		
	private Integer _maxnumberdifferentcrops;		
	private GrassManagementAlternativeListTO _grassmanagementalternatives;		
	private BeefManagementListTO _smallbeefruminantmanagements;		
	private BeefManagementListTO _beefmanagements;		



	public ProductionOrientationTO()
	{
		super();
		_watermanagement = new WaterManagementTO();
		_nutrientmanagement = new NutrientManagementTO();
		_grassmanagementalternatives = new GrassManagementAlternativeListTO();
		_smallbeefruminantmanagements = new BeefManagementListTO();
		_beefmanagements = new BeefManagementListTO();
	}

	public static ProductionOrientation createDBInstance()
	{
		ProductionOrientation dbItem = new ProductionOrientation();
		dbItem.setBeefManagements(new HashSet<BeefManagement>());
		dbItem.setGrassManagementAlternatives(new HashSet<GrassManagementAlternative>());
		dbItem.setMaxNumberDifferentCrops(new Integer(0));
		dbItem.setMaxRotationLength(new Integer(0));
		dbItem.setMinRotationLength(new Integer(0));
		dbItem.setNutrientmanagement(NutrientManagementTO.createDBInstance());
		dbItem.setSmallBeefRuminantManagements(new HashSet<BeefManagement>());
		dbItem.setWatermanagement(WaterManagementTO.createDBInstance());
		return dbItem;
	}


	public static ProductionOrientation createDBInstance(ProductionOrientationTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(ProductionOrientation dbItem)
    {
        if (dbItem != null) {
            dbItem.setBeefManagements(null);
            dbItem.setGrassManagementAlternatives(null);
            dbItem.setNutrientmanagement(null);
            dbItem.setSmallBeefRuminantManagements(null);
            dbItem.setWatermanagement(null);
        }
    }

    public ProductionOrientationTO assignFrom(ProductionOrientation target)	
	{
		if (target != null)
		{
			try {
				_beefmanagements .assignFrom(target.getBeefManagements());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_grassmanagementalternatives .assignFrom(target.getGrassManagementAlternatives());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_label_en = target.getLabel_en();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_maxnumberdifferentcrops = target.getMaxNumberDifferentCrops();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_maxrotationlength = target.getMaxRotationLength();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_minrotationlength = target.getMinRotationLength();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_nutrientmanagement .assignFrom(target.getNutrientmanagement());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_smallbeefruminantmanagements .assignFrom(target.getSmallBeefRuminantManagements());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
				_watermanagement .assignFrom(target.getWatermanagement());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
		}
		return this;
	}
    
    public ProductionOrientation assignTo(ProductionOrientation target)
    {
        if (target != null) 
        {
			target.setBeefManagements(_beefmanagements .assignTo(target.getBeefManagements()));
			target.setGrassManagementAlternatives(_grassmanagementalternatives .assignTo(target.getGrassManagementAlternatives()));
			target.setNutrientmanagement(_nutrientmanagement .assignTo(target.getNutrientmanagement()));
			target.setSmallBeefRuminantManagements(_smallbeefruminantmanagements .assignTo(target.getSmallBeefRuminantManagements()));
			target.setWatermanagement(_watermanagement .assignTo(target.getWatermanagement()));
			target.setId(_id);			
			target.setLabel_en(_label_en);			
			target.setMaxNumberDifferentCrops(_maxnumberdifferentcrops);			
			target.setMaxRotationLength(_maxrotationlength);			
			target.setMinRotationLength(_minrotationlength);			
        }
        return target;
    }	
    
    public boolean equalsTo(ProductionOrientation target)
    {
        if (target == null)
            return false;

        ProductionOrientationTO targetTO = new ProductionOrientationTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public ProductionOrientationTO clone()
    {
    	ProductionOrientationTO clone = new ProductionOrientationTO();
		clone.setBeefManagements(_beefmanagements);
		clone.setGrassManagementAlternatives(_grassmanagementalternatives);
		clone.setId(_id);
		clone.setLabel_en(_label_en);
		clone.setMaxNumberDifferentCrops(_maxnumberdifferentcrops);
		clone.setMaxRotationLength(_maxrotationlength);
		clone.setMinRotationLength(_minrotationlength);
		clone.setNutrientmanagement(_nutrientmanagement);
		clone.setSmallBeefRuminantManagements(_smallbeefruminantmanagements);
		clone.setWatermanagement(_watermanagement);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_watermanagement != null ? _watermanagement .hashCode() : 0);
		result = 31 * result + (_label_en != null ? _label_en .hashCode() : 0);
		result = 31 * result + (_nutrientmanagement != null ? _nutrientmanagement .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_minrotationlength != null ? _minrotationlength .hashCode() : 0);
		result = 31 * result + (_maxrotationlength != null ? _maxrotationlength .hashCode() : 0);
		result = 31 * result + (_maxnumberdifferentcrops != null ? _maxnumberdifferentcrops .hashCode() : 0);
		result = 31 * result + (_grassmanagementalternatives != null ? _grassmanagementalternatives .hashCode() : 0);
		result = 31 * result + (_smallbeefruminantmanagements != null ? _smallbeefruminantmanagements .hashCode() : 0);
		result = 31 * result + (_beefmanagements != null ? _beefmanagements .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof ProductionOrientationTO)) return false;

        ProductionOrientationTO classTO = (ProductionOrientationTO) o;

		if (_watermanagement != null ? !_watermanagement .equals(classTO._watermanagement) : classTO._watermanagement != null)
			return false;
		if (_label_en != null ? !_label_en .equals(classTO._label_en) : classTO._label_en != null)
			return false;
		if (_nutrientmanagement != null ? !_nutrientmanagement .equals(classTO._nutrientmanagement) : classTO._nutrientmanagement != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_minrotationlength != null ? !_minrotationlength .equals(classTO._minrotationlength) : classTO._minrotationlength != null)
			return false;
		if (_maxrotationlength != null ? !_maxrotationlength .equals(classTO._maxrotationlength) : classTO._maxrotationlength != null)
			return false;
		if (_maxnumberdifferentcrops != null ? !_maxnumberdifferentcrops .equals(classTO._maxnumberdifferentcrops) : classTO._maxnumberdifferentcrops != null)
			return false;
		if (_grassmanagementalternatives != null ? !_grassmanagementalternatives .equals(classTO._grassmanagementalternatives) : classTO._grassmanagementalternatives != null)
			return false;
		if (_smallbeefruminantmanagements != null ? !_smallbeefruminantmanagements .equals(classTO._smallbeefruminantmanagements) : classTO._smallbeefruminantmanagements != null)
			return false;
		if (_beefmanagements != null ? !_beefmanagements .equals(classTO._beefmanagements) : classTO._beefmanagements != null)
			return false;
        
        return true;
    }
    
    public BeefManagementListTO getBeefManagements()
    {
		return _beefmanagements;
    }
    public GrassManagementAlternativeListTO getGrassManagementAlternatives()
    {
		return _grassmanagementalternatives;
    }
    public Long getId()
    {
		return _id;
    }
    public String getLabel_en()
    {
		return _label_en;
    }
    public Integer getMaxNumberDifferentCrops()
    {
		return _maxnumberdifferentcrops;
    }
    public Integer getMaxRotationLength()
    {
		return _maxrotationlength;
    }
    public Integer getMinRotationLength()
    {
		return _minrotationlength;
    }
    public NutrientManagementTO getNutrientmanagement()
    {
		return _nutrientmanagement;
    }
    public BeefManagementListTO getSmallBeefRuminantManagements()
    {
		return _smallbeefruminantmanagements;
    }
    public WaterManagementTO getWatermanagement()
    {
		return _watermanagement;
    }
    public void setBeefManagements(BeefManagementListTO value)
    {
		_beefmanagements = value;
    }
    public void setGrassManagementAlternatives(GrassManagementAlternativeListTO value)
    {
		_grassmanagementalternatives = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setLabel_en(String value)
    {
		_label_en = value;
    }
    public void setMaxNumberDifferentCrops(Integer value)
    {
		_maxnumberdifferentcrops = value;
    }
    public void setMaxRotationLength(Integer value)
    {
		_maxrotationlength = value;
    }
    public void setMinRotationLength(Integer value)
    {
		_minrotationlength = value;
    }
    public void setNutrientmanagement(NutrientManagementTO value)
    {
		_nutrientmanagement = value;
    }
    public void setSmallBeefRuminantManagements(BeefManagementListTO value)
    {
		_smallbeefruminantmanagements = value;
    }
    public void setWatermanagement(WaterManagementTO value)
    {
		_watermanagement = value;
    }
}