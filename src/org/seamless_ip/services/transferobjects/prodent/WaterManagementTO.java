/* gromit: WaterManagementTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.prodent;

import java.io.Serializable;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.util.HashSet;
import org.seamless_ip.ontologies.crop.Crop;
import org.seamless_ip.ontologies.prodent.WaterManagement;
import org.seamless_ip.services.transferobjects.crop.CropListTO;
import org.seamless_ip.services.transferobjects.prodent.IManagementPracticeTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.prodent.WaterManagement", readonly=false, used=true)
@SuppressWarnings("serial")
public class WaterManagementTO extends AbstractTO implements IManagementPracticeTO<WaterManagementTO, WaterManagement>, Serializable, Cloneable 	
{
	private Long _id;		
	private Integer _startday;		
	private Integer _numberofrepetitions;		
	private Integer _endday;		
	private Float _plantavailablewaterthreshold;		
	private Float _irrigationwatervolume;		
	private CropListTO _crops;		
	private Boolean _userdefinedirrigation;		
	private Boolean _potentialirrigation;		
	private Boolean _demandbasedirrigation;		
	private Boolean _changenutrientmanagement;		



	public WaterManagementTO()
	{
		super();
		_crops = new CropListTO();
	}

	public static WaterManagement createDBInstance()
	{
		WaterManagement dbItem = new WaterManagement();
		dbItem.setChangeNutrientManagement(new Boolean(false));
		dbItem.setCrops(new HashSet<Crop>());
		dbItem.setDemandBasedIrrigation(new Boolean(false));
		dbItem.setEndDay(new Integer(0));
		dbItem.setNumberOfRepetitions(new Integer(0));
		dbItem.setPotentialIrrigation(new Boolean(false));
		dbItem.setStartDay(new Integer(0));
		dbItem.setUserDefinedIrrigation(new Boolean(false));
		return dbItem;
	}


	public static WaterManagement createDBInstance(WaterManagementTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(WaterManagement dbItem)
    {
        if (dbItem != null) {
            dbItem.setCrops(null);
        }
    }

    public WaterManagementTO assignFrom(WaterManagement target)	
	{
		if (target != null)
		{
			try {
					_changenutrientmanagement = target.getChangeNutrientManagement();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_crops .assignFrom(target.getCrops());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_demandbasedirrigation = target.getDemandBasedIrrigation();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_endday = target.getEndDay();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_irrigationwatervolume = target.getIrrigationWaterVolume();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_numberofrepetitions = target.getNumberOfRepetitions();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_plantavailablewaterthreshold = target.getPlantAvailableWaterThreshold();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_potentialirrigation = target.getPotentialIrrigation();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_startday = target.getStartDay();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_userdefinedirrigation = target.getUserDefinedIrrigation();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public WaterManagement assignTo(WaterManagement target)
    {
        if (target != null) 
        {
			target.setCrops(_crops .assignTo(target.getCrops()));
			target.setChangeNutrientManagement(_changenutrientmanagement);			
			target.setDemandBasedIrrigation(_demandbasedirrigation);			
			target.setEndDay(_endday);			
			target.setId(_id);			
			target.setIrrigationWaterVolume(_irrigationwatervolume);			
			target.setNumberOfRepetitions(_numberofrepetitions);			
			target.setPlantAvailableWaterThreshold(_plantavailablewaterthreshold);			
			target.setPotentialIrrigation(_potentialirrigation);			
			target.setStartDay(_startday);			
			target.setUserDefinedIrrigation(_userdefinedirrigation);			
        }
        return target;
    }	
    
    public boolean equalsTo(WaterManagement target)
    {
        if (target == null)
            return false;

        WaterManagementTO targetTO = new WaterManagementTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public WaterManagementTO clone()
    {
    	WaterManagementTO clone = new WaterManagementTO();
		clone.setChangeNutrientManagement(_changenutrientmanagement);
		clone.setCrops(_crops);
		clone.setDemandBasedIrrigation(_demandbasedirrigation);
		clone.setEndDay(_endday);
		clone.setId(_id);
		clone.setIrrigationWaterVolume(_irrigationwatervolume);
		clone.setNumberOfRepetitions(_numberofrepetitions);
		clone.setPlantAvailableWaterThreshold(_plantavailablewaterthreshold);
		clone.setPotentialIrrigation(_potentialirrigation);
		clone.setStartDay(_startday);
		clone.setUserDefinedIrrigation(_userdefinedirrigation);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_startday != null ? _startday .hashCode() : 0);
		result = 31 * result + (_numberofrepetitions != null ? _numberofrepetitions .hashCode() : 0);
		result = 31 * result + (_endday != null ? _endday .hashCode() : 0);
		result = 31 * result + (_plantavailablewaterthreshold != null ? _plantavailablewaterthreshold .hashCode() : 0);
		result = 31 * result + (_irrigationwatervolume != null ? _irrigationwatervolume .hashCode() : 0);
		result = 31 * result + (_crops != null ? _crops .hashCode() : 0);
		result = 31 * result + (_userdefinedirrigation != null ? _userdefinedirrigation .hashCode() : 0);
		result = 31 * result + (_potentialirrigation != null ? _potentialirrigation .hashCode() : 0);
		result = 31 * result + (_demandbasedirrigation != null ? _demandbasedirrigation .hashCode() : 0);
		result = 31 * result + (_changenutrientmanagement != null ? _changenutrientmanagement .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof WaterManagementTO)) return false;

        WaterManagementTO classTO = (WaterManagementTO) o;

		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_startday != null ? !_startday .equals(classTO._startday) : classTO._startday != null)
			return false;
		if (_numberofrepetitions != null ? !_numberofrepetitions .equals(classTO._numberofrepetitions) : classTO._numberofrepetitions != null)
			return false;
		if (_endday != null ? !_endday .equals(classTO._endday) : classTO._endday != null)
			return false;
		if (_plantavailablewaterthreshold != null ? !_plantavailablewaterthreshold .equals(classTO._plantavailablewaterthreshold) : classTO._plantavailablewaterthreshold != null)
			return false;
		if (_irrigationwatervolume != null ? !_irrigationwatervolume .equals(classTO._irrigationwatervolume) : classTO._irrigationwatervolume != null)
			return false;
		if (_crops != null ? !_crops .equals(classTO._crops) : classTO._crops != null)
			return false;
		if (_userdefinedirrigation != null ? !_userdefinedirrigation .equals(classTO._userdefinedirrigation) : classTO._userdefinedirrigation != null)
			return false;
		if (_potentialirrigation != null ? !_potentialirrigation .equals(classTO._potentialirrigation) : classTO._potentialirrigation != null)
			return false;
		if (_demandbasedirrigation != null ? !_demandbasedirrigation .equals(classTO._demandbasedirrigation) : classTO._demandbasedirrigation != null)
			return false;
		if (_changenutrientmanagement != null ? !_changenutrientmanagement .equals(classTO._changenutrientmanagement) : classTO._changenutrientmanagement != null)
			return false;
        
        return true;
    }
    
    public Boolean getChangeNutrientManagement()
    {
		return _changenutrientmanagement;
    }
    public CropListTO getCrops()
    {
		return _crops;
    }
    public Boolean getDemandBasedIrrigation()
    {
		return _demandbasedirrigation;
    }
    public Integer getEndDay()
    {
		return _endday;
    }
    public Long getId()
    {
		return _id;
    }
    public Float getIrrigationWaterVolume()
    {
		return _irrigationwatervolume;
    }
    public Integer getNumberOfRepetitions()
    {
		return _numberofrepetitions;
    }
    public Float getPlantAvailableWaterThreshold()
    {
		return _plantavailablewaterthreshold;
    }
    public Boolean getPotentialIrrigation()
    {
		return _potentialirrigation;
    }
    public Integer getStartDay()
    {
		return _startday;
    }
    public Boolean getUserDefinedIrrigation()
    {
		return _userdefinedirrigation;
    }
    public void setChangeNutrientManagement(Boolean value)
    {
		_changenutrientmanagement = value;
    }
    public void setCrops(CropListTO value)
    {
		_crops = value;
    }
    public void setDemandBasedIrrigation(Boolean value)
    {
		_demandbasedirrigation = value;
    }
    public void setEndDay(Integer value)
    {
		_endday = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setIrrigationWaterVolume(Float value)
    {
		_irrigationwatervolume = value;
    }
    public void setNumberOfRepetitions(Integer value)
    {
		_numberofrepetitions = value;
    }
    public void setPlantAvailableWaterThreshold(Float value)
    {
		_plantavailablewaterthreshold = value;
    }
    public void setPotentialIrrigation(Boolean value)
    {
		_potentialirrigation = value;
    }
    public void setStartDay(Integer value)
    {
		_startday = value;
    }
    public void setUserDefinedIrrigation(Boolean value)
    {
		_userdefinedirrigation = value;
    }
}