/* gromit: NutrientManagementTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.prodent;

import java.io.Serializable;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.util.HashSet;
import org.seamless_ip.ontologies.crop.Crop;
import org.seamless_ip.ontologies.prodent.NutrientManagement;
import org.seamless_ip.services.transferobjects.crop.CropListTO;
import org.seamless_ip.services.transferobjects.prodent.IManagementPracticeTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.prodent.NutrientManagement", readonly=false, used=true)
@SuppressWarnings("serial")
public class NutrientManagementTO extends AbstractTO implements IManagementPracticeTO<NutrientManagementTO, NutrientManagement>, Serializable, Cloneable 	
{
	private Long _id;		
	private Integer _numberlevels;		
	private Float _extrainsurancepremium;		
	private CropListTO _crops;		
	private Boolean _yieldchange40percent;		
	private Boolean _yieldchange33percent;		
	private Boolean _yieldchange25percent;		



	public NutrientManagementTO()
	{
		super();
		_crops = new CropListTO();
	}

	public static NutrientManagement createDBInstance()
	{
		NutrientManagement dbItem = new NutrientManagement();
		dbItem.setCrops(new HashSet<Crop>());
		dbItem.setNumberLevels(new Integer(0));
		dbItem.setYieldchange25percent(new Boolean(false));
		dbItem.setYieldchange33percent(new Boolean(false));
		dbItem.setYieldchange40percent(new Boolean(false));
		return dbItem;
	}


	public static NutrientManagement createDBInstance(NutrientManagementTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(NutrientManagement dbItem)
    {
        if (dbItem != null) {
            dbItem.setCrops(null);
        }
    }

    public NutrientManagementTO assignFrom(NutrientManagement target)	
	{
		if (target != null)
		{
			try {
				_crops .assignFrom(target.getCrops());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_extrainsurancepremium = target.getExtraInsurancePremium();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_numberlevels = target.getNumberLevels();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_yieldchange25percent = target.getYieldchange25percent();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_yieldchange33percent = target.getYieldchange33percent();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_yieldchange40percent = target.getYieldchange40percent();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public NutrientManagement assignTo(NutrientManagement target)
    {
        if (target != null) 
        {
			target.setCrops(_crops .assignTo(target.getCrops()));
			target.setExtraInsurancePremium(_extrainsurancepremium);			
			target.setId(_id);			
			target.setNumberLevels(_numberlevels);			
			target.setYieldchange25percent(_yieldchange25percent);			
			target.setYieldchange33percent(_yieldchange33percent);			
			target.setYieldchange40percent(_yieldchange40percent);			
        }
        return target;
    }	
    
    public boolean equalsTo(NutrientManagement target)
    {
        if (target == null)
            return false;

        NutrientManagementTO targetTO = new NutrientManagementTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public NutrientManagementTO clone()
    {
    	NutrientManagementTO clone = new NutrientManagementTO();
		clone.setCrops(_crops);
		clone.setExtraInsurancePremium(_extrainsurancepremium);
		clone.setId(_id);
		clone.setNumberLevels(_numberlevels);
		clone.setYieldchange25percent(_yieldchange25percent);
		clone.setYieldchange33percent(_yieldchange33percent);
		clone.setYieldchange40percent(_yieldchange40percent);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_numberlevels != null ? _numberlevels .hashCode() : 0);
		result = 31 * result + (_extrainsurancepremium != null ? _extrainsurancepremium .hashCode() : 0);
		result = 31 * result + (_crops != null ? _crops .hashCode() : 0);
		result = 31 * result + (_yieldchange40percent != null ? _yieldchange40percent .hashCode() : 0);
		result = 31 * result + (_yieldchange33percent != null ? _yieldchange33percent .hashCode() : 0);
		result = 31 * result + (_yieldchange25percent != null ? _yieldchange25percent .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof NutrientManagementTO)) return false;

        NutrientManagementTO classTO = (NutrientManagementTO) o;

		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_numberlevels != null ? !_numberlevels .equals(classTO._numberlevels) : classTO._numberlevels != null)
			return false;
		if (_extrainsurancepremium != null ? !_extrainsurancepremium .equals(classTO._extrainsurancepremium) : classTO._extrainsurancepremium != null)
			return false;
		if (_crops != null ? !_crops .equals(classTO._crops) : classTO._crops != null)
			return false;
		if (_yieldchange40percent != null ? !_yieldchange40percent .equals(classTO._yieldchange40percent) : classTO._yieldchange40percent != null)
			return false;
		if (_yieldchange33percent != null ? !_yieldchange33percent .equals(classTO._yieldchange33percent) : classTO._yieldchange33percent != null)
			return false;
		if (_yieldchange25percent != null ? !_yieldchange25percent .equals(classTO._yieldchange25percent) : classTO._yieldchange25percent != null)
			return false;
        
        return true;
    }
    
    public CropListTO getCrops()
    {
		return _crops;
    }
    public Float getExtraInsurancePremium()
    {
		return _extrainsurancepremium;
    }
    public Long getId()
    {
		return _id;
    }
    public Integer getNumberLevels()
    {
		return _numberlevels;
    }
    public Boolean getYieldchange25percent()
    {
		return _yieldchange25percent;
    }
    public Boolean getYieldchange33percent()
    {
		return _yieldchange33percent;
    }
    public Boolean getYieldchange40percent()
    {
		return _yieldchange40percent;
    }
    public void setCrops(CropListTO value)
    {
		_crops = value;
    }
    public void setExtraInsurancePremium(Float value)
    {
		_extrainsurancepremium = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setNumberLevels(Integer value)
    {
		_numberlevels = value;
    }
    public void setYieldchange25percent(Boolean value)
    {
		_yieldchange25percent = value;
    }
    public void setYieldchange33percent(Boolean value)
    {
		_yieldchange33percent = value;
    }
    public void setYieldchange40percent(Boolean value)
    {
		_yieldchange40percent = value;
    }
}