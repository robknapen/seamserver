/* gromit: FarmQuotaTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.farmopt;

import java.io.Serializable;
import java.lang.Float;
import java.lang.Long;
import java.lang.String;
import org.seamless_ip.ontologies.farmopt.FarmQuota;
import org.seamless_ip.services.transferobjects.crop.IProductTO;
import org.seamless_ip.services.transferobjects.farm.RepresentativeFarmTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.farmopt.FarmQuota", readonly=false, used=true)
@SuppressWarnings("serial")
public class FarmQuotaTO extends AbstractTO implements TO<FarmQuotaTO, FarmQuota>, Serializable, Cloneable 	
{
	private String _quotalevel;		
	private String _label_gms;		
	private RepresentativeFarmTO _representativefarm;		
	private Long _id;		
	private IProductTO<Object, Object> _product;
	private Float _quotaamount;		
	private String _baselinequotalevel/*transient field*/;		
	private Float _baselinequotaamount/*transient field*/;		
	private Float _baselineadditionalprice/*transient field*/;		
	private Float _additionalprice;		

	/* 
	 * Notes: field commented as 'transient field' are only used to exchange information
	 * between client and server.
	 * 
	 * - They are not persistent (it doesn't exists any field on the database to save that values)
	 * - They are not assigned in the TO object method (assignFrom, assignTO)
	 * - They are not considered in the TO equality methods (hashCode, equals)
	 * 
	 * To use this field you have to do the assignment manually (e.g on the DAO classes that use the 
	 * TO). In the client you will be able to check the content of the filed. 
	 * 
	 */


	public FarmQuotaTO()
	{
		super();
		_representativefarm = new RepresentativeFarmTO();
	}

	public static FarmQuota createDBInstance()
	{
		FarmQuota dbItem = new FarmQuota();
		dbItem.setRepresentativeFarm(RepresentativeFarmTO.createDBInstance());
		return dbItem;
	}


	public static FarmQuota createDBInstance(FarmQuotaTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(FarmQuota dbItem)
    {
        if (dbItem != null) {
            dbItem.setProduct(null);
            dbItem.setRepresentativeFarm(null);
        }
    }

	@SuppressWarnings("unchecked")
    public FarmQuotaTO assignFrom(FarmQuota target)	
	{
		if (target != null)
		{
			try {
					_additionalprice = target.getAdditionalPrice();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_label_gms = target.getLabel_gms();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			//this is the transport object (TO) management of interfaces fields!
			Object instanceofinterface = null;
			try {
				instanceofinterface = target.getProduct();				
			} catch (NullPointerException e)
			{
				//to catch hibernate exception throwed when null value is getted				
			}	
			if (instanceofinterface != null)
			{
				try {
					
					String TOclassname = instanceofinterface.getClass().getName().replace("org.seamless_ip.ontologies", "org.seamless_ip.services.transferobjects").concat("TO");
					_product = (IProductTO)((IProductTO)(Class.forName(TOclassname).newInstance())).assignFrom(instanceofinterface);
					_product .assignFrom(target.getProduct());
				} catch (Exception e /*ClassNotFoundException, InstantiationException ,IllegalAccessException*/ ){
					e.printStackTrace();
				}
			}	
			try {
					_quotaamount = target.getQuotaAmount();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_quotalevel = target.getQuotaLevel();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_representativefarm .assignFrom(target.getRepresentativeFarm());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
		}
		return this;
	}
    
    public FarmQuota assignTo(FarmQuota target)
    {
        if (target != null) 
        {
			//TODO: manage correctly reference to interface, following code give error: target.setProduct(_product .assignTo(target.getProduct()));
			target.setRepresentativeFarm(_representativefarm .assignTo(target.getRepresentativeFarm()));
			target.setAdditionalPrice(_additionalprice);			
			target.setId(_id);			
			target.setLabel_gms(_label_gms);			
			target.setQuotaAmount(_quotaamount);			
			target.setQuotaLevel(_quotalevel);			
        }
        return target;
    }	
    
    public boolean equalsTo(FarmQuota target)
    {
        if (target == null)
            return false;

        FarmQuotaTO targetTO = new FarmQuotaTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public FarmQuotaTO clone()
    {
    	FarmQuotaTO clone = new FarmQuotaTO();
		clone.setAdditionalPrice(_additionalprice);
		clone.setId(_id);
		clone.setLabel_gms(_label_gms);
		clone.setProduct(_product);
		clone.setQuotaAmount(_quotaamount);
		clone.setQuotaLevel(_quotalevel);
		clone.setRepresentativeFarm(_representativefarm);
		clone.setbaselineAdditionalPrice(_baselineadditionalprice/*transient field*/);
		clone.setbaselineQuotaAmount(_baselinequotaamount/*transient field*/);
		clone.setbaselineQuotaLevel(_baselinequotalevel/*transient field*/);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_quotalevel != null ? _quotalevel .hashCode() : 0);
		result = 31 * result + (_label_gms != null ? _label_gms .hashCode() : 0);
		result = 31 * result + (_representativefarm != null ? _representativefarm .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_product != null ? _product .hashCode() : 0);
		result = 31 * result + (_quotaamount != null ? _quotaamount .hashCode() : 0);
		result = 31 * result + (_additionalprice != null ? _additionalprice .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof FarmQuotaTO)) return false;

        FarmQuotaTO classTO = (FarmQuotaTO) o;

		if (_quotalevel != null ? !_quotalevel .equals(classTO._quotalevel) : classTO._quotalevel != null)
			return false;
		if (_label_gms != null ? !_label_gms .equals(classTO._label_gms) : classTO._label_gms != null)
			return false;
		if (_representativefarm != null ? !_representativefarm .equals(classTO._representativefarm) : classTO._representativefarm != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_product != null ? !_product .equals(classTO._product) : classTO._product != null)
			return false;
		if (_quotaamount != null ? !_quotaamount .equals(classTO._quotaamount) : classTO._quotaamount != null)
			return false;
		if (_additionalprice != null ? !_additionalprice .equals(classTO._additionalprice) : classTO._additionalprice != null)
			return false;
        
        return true;
    }
    
    public Float getAdditionalPrice()
    {
		return _additionalprice;
    }
    public Long getId()
    {
		return _id;
    }
    public String getLabel_gms()
    {
		return _label_gms;
    }
	@SuppressWarnings("unchecked")
    public IProductTO getProduct()
    {
		return _product;
    }
    public Float getQuotaAmount()
    {
		return _quotaamount;
    }
    public String getQuotaLevel()
    {
		return _quotalevel;
    }
    public RepresentativeFarmTO getRepresentativeFarm()
    {
		return _representativefarm;
    }
    public Float getbaselineAdditionalPrice()
    {
		return _baselineadditionalprice/*transient field*/;
    }
    public Float getbaselineQuotaAmount()
    {
		return _baselinequotaamount/*transient field*/;
    }
    public String getbaselineQuotaLevel()
    {
		return _baselinequotalevel/*transient field*/;
    }
    public void setAdditionalPrice(Float value)
    {
		_additionalprice = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setLabel_gms(String value)
    {
		_label_gms = value;
    }
	@SuppressWarnings("unchecked")
    public void setProduct(IProductTO value)
    {
		_product = value;
    }
    public void setQuotaAmount(Float value)
    {
		_quotaamount = value;
    }
    public void setQuotaLevel(String value)
    {
		_quotalevel = value;
    }
    public void setRepresentativeFarm(RepresentativeFarmTO value)
    {
		_representativefarm = value;
    }
    public void setbaselineAdditionalPrice(Float value)
    {
		_baselineadditionalprice/*transient field*/ = value;
    }
    public void setbaselineQuotaAmount(Float value)
    {
		_baselinequotaamount/*transient field*/ = value;
    }
    public void setbaselineQuotaLevel(String value)
    {
		_baselinequotalevel/*transient field*/ = value;
    }
}