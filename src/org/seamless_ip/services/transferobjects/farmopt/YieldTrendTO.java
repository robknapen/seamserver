/* gromit: YieldTrendTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.farmopt;

import java.io.Serializable;
import java.lang.Float;
import java.lang.Long;
import org.seamless_ip.ontologies.farmopt.YieldTrend;
import org.seamless_ip.services.transferobjects.farm.NUTSregionTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.TO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.farmopt.YieldTrend", readonly=false, used=true)
@SuppressWarnings("serial")
public class YieldTrendTO extends AbstractTO implements TO<YieldTrendTO, YieldTrend>, Serializable, Cloneable 	
{
	private NUTSregionTO _region;		
	private Long _id;		
	private Float _yield;		
	private Float _baselineValue/*transient field*/;		



	public YieldTrendTO()
	{
		super();
		_region = new NUTSregionTO();
	}

	public static YieldTrend createDBInstance()
	{
		YieldTrend dbItem = new YieldTrend();
		dbItem.setRegion(NUTSregionTO.createDBInstance());
		return dbItem;
	}


	public static YieldTrend createDBInstance(YieldTrendTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(YieldTrend dbItem)
    {
        if (dbItem != null) {
            dbItem.setRegion(null);
        }
    }

    public YieldTrendTO assignFrom(YieldTrend target)	
	{
		if (target != null)
		{
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_region .assignFrom(target.getRegion());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_yield = target.getYield();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public YieldTrend assignTo(YieldTrend target)
    {
        if (target != null) 
        {
			target.setRegion(_region .assignTo(target.getRegion()));
			target.setId(_id);			
			target.setYield(_yield);			
        }
        return target;
    }	
    
    public boolean equalsTo(YieldTrend target)
    {
        if (target == null)
            return false;

        YieldTrendTO targetTO = new YieldTrendTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public YieldTrendTO clone()
    {
    	YieldTrendTO clone = new YieldTrendTO();
		clone.setBaselineValue(_baselineValue/*transient field*/);
		clone.setId(_id);
		clone.setRegion(_region);
		clone.setYield(_yield);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_region != null ? _region .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_yield != null ? _yield .hashCode() : 0);
		result = 31 * result + (_baselineValue/*transient field*/ != null ? _baselineValue/*transient field*/ .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof YieldTrendTO)) return false;

        YieldTrendTO classTO = (YieldTrendTO) o;

		if (_region != null ? !_region .equals(classTO._region) : classTO._region != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_yield != null ? !_yield .equals(classTO._yield) : classTO._yield != null)
			return false;
		if (_baselineValue/*transient field*/ != null ? !_baselineValue/*transient field*/ .equals(classTO._baselineValue/*transient field*/) : classTO._baselineValue/*transient field*/ != null)
			return false;
        
        return true;
    }
    
    public Float getBaselineValue()
    {
		return _baselineValue/*transient field*/;
    }
    public Long getId()
    {
		return _id;
    }
    public NUTSregionTO getRegion()
    {
		return _region;
    }
    public Float getYield()
    {
		return _yield;
    }
    public void setBaselineValue(Float value)
    {
		_baselineValue/*transient field*/ = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setRegion(NUTSregionTO value)
    {
		_region = value;
    }
    public void setYield(Float value)
    {
		_yield = value;
    }
}