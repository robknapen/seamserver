/* gromit: BasicPremiumTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.capri;

import java.io.Serializable;
import java.lang.Float;
import java.lang.Long;
import java.lang.String;
import org.seamless_ip.ontologies.capri.BasicPremium;
import org.seamless_ip.services.transferobjects.capri.ICAPRIParameterTO;
import org.seamless_ip.services.transferobjects.capri.PremiumGroupTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.capri.BasicPremium", readonly=false, used=true)
@SuppressWarnings("serial")
public class BasicPremiumTO extends AbstractTO implements ICAPRIParameterTO<BasicPremiumTO, BasicPremium>, Serializable, Cloneable 	
{
	private String _applicationtype;		
	private PremiumGroupTO _premiumgroup;		
	private Long _id;		
	private Float _value;		
	private Float _baseyearpricechange/*transient field*/;		

	/* 
	 * Notes: field commented as 'transient field' are only used to exchange information
	 * between client and server.
	 * 
	 * - They are not persistent (it doesn't exists any field on the database to save that values)
	 * - They are not assigned in the TO object method (assignFrom, assignTO)
	 * - They are not considered in the TO equality methods (hashCode, equals)
	 * 
	 * To use this field you have to do the assignment manually (e.g on the DAO classes that use the 
	 * TO). In the client you will be able to check the content of the filed. 
	 * 
	 */


	public BasicPremiumTO()
	{
		super();
		_premiumgroup = new PremiumGroupTO();
	}

	public static BasicPremium createDBInstance()
	{
		BasicPremium dbItem = new BasicPremium();
		dbItem.setPremiumGroup(PremiumGroupTO.createDBInstance());
		return dbItem;
	}


	public static BasicPremium createDBInstance(BasicPremiumTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(BasicPremium dbItem)
    {
        if (dbItem != null) {
            dbItem.setPremiumGroup(null);
        }
    }

    public BasicPremiumTO assignFrom(BasicPremium target)	
	{
		if (target != null)
		{
			try {
					_applicationtype = target.getApplicationType();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_premiumgroup .assignFrom(target.getPremiumGroup());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_value = target.getValue();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public BasicPremium assignTo(BasicPremium target)
    {
        if (target != null) 
        {
			target.setPremiumGroup(_premiumgroup .assignTo(target.getPremiumGroup()));
			target.setApplicationType(_applicationtype);			
			target.setId(_id);			
			target.setValue(_value);			
        }
        return target;
    }	
    
    public boolean equalsTo(BasicPremium target)
    {
        if (target == null)
            return false;

        BasicPremiumTO targetTO = new BasicPremiumTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public BasicPremiumTO clone()
    {
    	BasicPremiumTO clone = new BasicPremiumTO();
		clone.setApplicationType(_applicationtype);
		clone.setId(_id);
		clone.setPremiumGroup(_premiumgroup);
		clone.setValue(_value);
		clone.setbaseyearPriceChange(_baseyearpricechange/*transient field*/);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_applicationtype != null ? _applicationtype .hashCode() : 0);
		result = 31 * result + (_premiumgroup != null ? _premiumgroup .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_value != null ? _value .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof BasicPremiumTO)) return false;

        BasicPremiumTO classTO = (BasicPremiumTO) o;

		if (_applicationtype != null ? !_applicationtype .equals(classTO._applicationtype) : classTO._applicationtype != null)
			return false;
		if (_premiumgroup != null ? !_premiumgroup .equals(classTO._premiumgroup) : classTO._premiumgroup != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_value != null ? !_value .equals(classTO._value) : classTO._value != null)
			return false;
        
        return true;
    }
    
    public String getApplicationType()
    {
		return _applicationtype;
    }
    public Long getId()
    {
		return _id;
    }
    public PremiumGroupTO getPremiumGroup()
    {
		return _premiumgroup;
    }
    public Float getValue()
    {
		return _value;
    }
    public Float getbaseyearPriceChange()
    {
		return _baseyearpricechange/*transient field*/;
    }
    public void setApplicationType(String value)
    {
		_applicationtype = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setPremiumGroup(PremiumGroupTO value)
    {
		_premiumgroup = value;
    }
    public void setValue(Float value)
    {
		_value = value;
    }
    public void setbaseyearPriceChange(Float value)
    {
		_baseyearpricechange/*transient field*/ = value;
    }
}