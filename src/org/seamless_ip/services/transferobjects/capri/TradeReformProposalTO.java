/* gromit: TradeReformProposalTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.capri;

import java.io.Serializable;
import java.lang.Float;
import java.lang.Long;
import java.util.HashSet;
import org.seamless_ip.ontologies.capri.TradeReformProposal;
import org.seamless_ip.ontologies.capri.TradeReformProposalCut;
import org.seamless_ip.services.transferobjects.capri.CountryAggregateTO;
import org.seamless_ip.services.transferobjects.capri.ICAPRIParameterTO;
import org.seamless_ip.services.transferobjects.capri.TradeReformProposalCutListTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.capri.TradeReformProposal", readonly=false, used=true)
@SuppressWarnings("serial")
public class TradeReformProposalTO extends AbstractTO implements ICAPRIParameterTO<TradeReformProposalTO, TradeReformProposal>, Serializable, Cloneable 	
{
	private TradeReformProposalCutListTO _tradereformproposalcuts;		
	private Long _id;		
	private Float _capvalue;		
	private CountryAggregateTO _fromcountryaggregate;		



	public TradeReformProposalTO()
	{
		super();
		_tradereformproposalcuts = new TradeReformProposalCutListTO();
		_fromcountryaggregate = new CountryAggregateTO();
	}

	public static TradeReformProposal createDBInstance()
	{
		TradeReformProposal dbItem = new TradeReformProposal();
		dbItem.setFromCountryAggregate(CountryAggregateTO.createDBInstance());
		dbItem.setTradeReformProposalCuts(new HashSet<TradeReformProposalCut>());
		return dbItem;
	}


	public static TradeReformProposal createDBInstance(TradeReformProposalTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(TradeReformProposal dbItem)
    {
        if (dbItem != null) {
            dbItem.setFromCountryAggregate(null);
            dbItem.setTradeReformProposalCuts(null);
        }
    }

    public TradeReformProposalTO assignFrom(TradeReformProposal target)	
	{
		if (target != null)
		{
			try {
					_capvalue = target.getCAPValue();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_fromcountryaggregate .assignFrom(target.getFromCountryAggregate());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_tradereformproposalcuts .assignFrom(target.getTradeReformProposalCuts());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
		}
		return this;
	}
    
    public TradeReformProposal assignTo(TradeReformProposal target)
    {
        if (target != null) 
        {
			target.setFromCountryAggregate(_fromcountryaggregate .assignTo(target.getFromCountryAggregate()));
			target.setTradeReformProposalCuts(_tradereformproposalcuts .assignTo(target.getTradeReformProposalCuts()));
			target.setCAPValue(_capvalue);			
			target.setId(_id);			
        }
        return target;
    }	
    
    public boolean equalsTo(TradeReformProposal target)
    {
        if (target == null)
            return false;

        TradeReformProposalTO targetTO = new TradeReformProposalTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public TradeReformProposalTO clone()
    {
    	TradeReformProposalTO clone = new TradeReformProposalTO();
		clone.setCAPValue(_capvalue);
		clone.setFromCountryAggregate(_fromcountryaggregate);
		clone.setId(_id);
		clone.setTradeReformProposalCuts(_tradereformproposalcuts);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_tradereformproposalcuts != null ? _tradereformproposalcuts .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_capvalue != null ? _capvalue .hashCode() : 0);
		result = 31 * result + (_fromcountryaggregate != null ? _fromcountryaggregate .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof TradeReformProposalTO)) return false;

        TradeReformProposalTO classTO = (TradeReformProposalTO) o;

		if (_tradereformproposalcuts != null ? !_tradereformproposalcuts .equals(classTO._tradereformproposalcuts) : classTO._tradereformproposalcuts != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_capvalue != null ? !_capvalue .equals(classTO._capvalue) : classTO._capvalue != null)
			return false;
		if (_fromcountryaggregate != null ? !_fromcountryaggregate .equals(classTO._fromcountryaggregate) : classTO._fromcountryaggregate != null)
			return false;
        
        return true;
    }
    
    public Float getCAPValue()
    {
		return _capvalue;
    }
    public CountryAggregateTO getFromCountryAggregate()
    {
		return _fromcountryaggregate;
    }
    public Long getId()
    {
		return _id;
    }
    public TradeReformProposalCutListTO getTradeReformProposalCuts()
    {
		return _tradereformproposalcuts;
    }
    public void setCAPValue(Float value)
    {
		_capvalue = value;
    }
    public void setFromCountryAggregate(CountryAggregateTO value)
    {
		_fromcountryaggregate = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setTradeReformProposalCuts(TradeReformProposalCutListTO value)
    {
		_tradereformproposalcuts = value;
    }
}