/* gromit: QuotaCountryTO .java
 * ==============================================================================
 * (This code was generated by a tool)
 * ==============================================================================
 * This work has been carried out as part of the SEAMLESS Integrated Framework
 * project, EU 6th Framework Programme, contract no. 010036-2 and/or as part
 * of the SEAMLESS association.
 *
 * Copyright (c) 2009 The SEAMLESS Association.
 *
 * For more information: http://www.seamlessassociation.org;
 * email: info@seamless-if.org
 *
 * The contents of this file is subject to the SEAMLESS Association License for
 * software infrastructure and model components Version 1.1 (the "License");
 * you may not use this file except in compliance with the License. You may
 * obtain a copy of the License at http://www.seamlessassociation.org/License.htm
 *
 * Software distributed under the License is distributed on an "AS IS"  basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific governing rights and limitations.
 *
 * The Initial Developers of the Original Code are:
 * - Ioannis Athanasiadis; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Benny Johnsson; Lund University
 * - Rob Knapen; Alterra, Wageningen UR
 * - Hongtao Li; IDSIA Dalle Molle Institute for Artificial Intelligence
 * - Michiel Rop; Alterra, Wageningen UR / ilionX
 * - Lorenzo Ruinelli; IDSIA Dalle Molle Institute for Artificial Intelligence
 * ================================================================================
 * Contributor(s): N/A
 * ================================================================================
 */
package org.seamless_ip.services.transferobjects.capri;

import java.io.Serializable;
import java.lang.Float;
import java.lang.Long;
import java.lang.String;
import org.seamless_ip.ontologies.capri.QuotaCountry;
import org.seamless_ip.services.transferobjects.capri.CountryTO;
import org.seamless_ip.services.transferobjects.capri.ICAPRIParameterTO;
import org.seamless_ip.services.transferobjects.crop.ProductGroupTO;
import org.seamless_ip.services.transferobjects.utils.AbstractTO;
import org.seamless_ip.services.transferobjects.utils.CodegeneratorSettings;

@CodegeneratorSettings(sourcename="org.seamless_ip.ontologies.capri.QuotaCountry", readonly=false, used=true)
@SuppressWarnings("serial")
public class QuotaCountryTO extends AbstractTO implements ICAPRIParameterTO<QuotaCountryTO, QuotaCountry>, Serializable, Cloneable 	
{
	private String _quotalevel;		
	private ProductGroupTO _productgroup;		
	private Long _id;		
	private Float _quotashare;		
	private Float _additionalprice;		
	private CountryTO _country;		



	public QuotaCountryTO()
	{
		super();
		_productgroup = new ProductGroupTO();
		_country = new CountryTO();
	}

	public static QuotaCountry createDBInstance()
	{
		QuotaCountry dbItem = new QuotaCountry();
		dbItem.setCountry(CountryTO.createDBInstance());
		dbItem.setProductGroup(ProductGroupTO.createDBInstance());
		return dbItem;
	}


	public static QuotaCountry createDBInstance(QuotaCountryTO toItem)
	{
		if (toItem != null)
			return toItem.assignTo(createDBInstance());
		else
			return createDBInstance();
	}
	
    public static void releaseDBInstance(QuotaCountry dbItem)
    {
        if (dbItem != null) {
            dbItem.setCountry(null);
            dbItem.setProductGroup(null);
        }
    }

    public QuotaCountryTO assignFrom(QuotaCountry target)	
	{
		if (target != null)
		{
			try {
					_additionalprice = target.getAdditionalPrice();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_country .assignFrom(target.getCountry());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_id = target.getId();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
				_productgroup .assignFrom(target.getProductGroup());
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}		
			try {
					_quotalevel = target.getQuotaLevel();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
			try {
					_quotashare = target.getQuotaShare();
			} catch(Exception e)
			{
				//to catch hibernate exception throwed when null value is getted
			}			
		}
		return this;
	}
    
    public QuotaCountry assignTo(QuotaCountry target)
    {
        if (target != null) 
        {
			target.setCountry(_country .assignTo(target.getCountry()));
			target.setProductGroup(_productgroup .assignTo(target.getProductGroup()));
			target.setAdditionalPrice(_additionalprice);			
			target.setId(_id);			
			target.setQuotaLevel(_quotalevel);			
			target.setQuotaShare(_quotashare);			
        }
        return target;
    }	
    
    public boolean equalsTo(QuotaCountry target)
    {
        if (target == null)
            return false;

        QuotaCountryTO targetTO = new QuotaCountryTO().assignFrom(target);
        return targetTO.equals(this);
    }
    
    @Override
    public QuotaCountryTO clone()
    {
    	QuotaCountryTO clone = new QuotaCountryTO();
		clone.setAdditionalPrice(_additionalprice);
		clone.setCountry(_country);
		clone.setId(_id);
		clone.setProductGroup(_productgroup);
		clone.setQuotaLevel(_quotalevel);
		clone.setQuotaShare(_quotashare);
        return clone;
    }    
    
    @Override
    public int hashCode()
    {
        int result = 0;
		result = 31 * result + (_quotalevel != null ? _quotalevel .hashCode() : 0);
		result = 31 * result + (_productgroup != null ? _productgroup .hashCode() : 0);
		result = 31 * result + (_id != null ? _id .hashCode() : 0);
		result = 31 * result + (_quotashare != null ? _quotashare .hashCode() : 0);
		result = 31 * result + (_additionalprice != null ? _additionalprice .hashCode() : 0);
		result = 31 * result + (_country != null ? _country .hashCode() : 0);
        return result;
    }    
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof QuotaCountryTO)) return false;

        QuotaCountryTO classTO = (QuotaCountryTO) o;

		if (_quotalevel != null ? !_quotalevel .equals(classTO._quotalevel) : classTO._quotalevel != null)
			return false;
		if (_productgroup != null ? !_productgroup .equals(classTO._productgroup) : classTO._productgroup != null)
			return false;
		if (_id != null ? !_id .equals(classTO._id) : classTO._id != null)
			return false;
		if (_quotashare != null ? !_quotashare .equals(classTO._quotashare) : classTO._quotashare != null)
			return false;
		if (_additionalprice != null ? !_additionalprice .equals(classTO._additionalprice) : classTO._additionalprice != null)
			return false;
		if (_country != null ? !_country .equals(classTO._country) : classTO._country != null)
			return false;
        
        return true;
    }
    
    public Float getAdditionalPrice()
    {
		return _additionalprice;
    }
    public CountryTO getCountry()
    {
		return _country;
    }
    public Long getId()
    {
		return _id;
    }
    public ProductGroupTO getProductGroup()
    {
		return _productgroup;
    }
    public String getQuotaLevel()
    {
		return _quotalevel;
    }
    public Float getQuotaShare()
    {
		return _quotashare;
    }
    public void setAdditionalPrice(Float value)
    {
		_additionalprice = value;
    }
    public void setCountry(CountryTO value)
    {
		_country = value;
    }
    public void setId(Long value)
    {
		_id = value;
    }
    public void setProductGroup(ProductGroupTO value)
    {
		_productgroup = value;
    }
    public void setQuotaLevel(String value)
    {
		_quotalevel = value;
    }
    public void setQuotaShare(Float value)
    {
		_quotashare = value;
    }
}